// Code generated by go-swagger; DO NOT EDIT.

package tcp_request_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/anantadwi13/cli-whm/internal/external/api/haproxy/models"
)

// CreateTCPRequestRuleReader is a Reader for the CreateTCPRequestRule structure.
type CreateTCPRequestRuleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateTCPRequestRuleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateTCPRequestRuleCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewCreateTCPRequestRuleAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateTCPRequestRuleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreateTCPRequestRuleConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewCreateTCPRequestRuleDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCreateTCPRequestRuleCreated creates a CreateTCPRequestRuleCreated with default headers values
func NewCreateTCPRequestRuleCreated() *CreateTCPRequestRuleCreated {
	return &CreateTCPRequestRuleCreated{}
}

/* CreateTCPRequestRuleCreated describes a response with status code 201, with default header values.

TCP Request Rule created
*/
type CreateTCPRequestRuleCreated struct {
	Payload *models.TCPRequestRule
}

func (o *CreateTCPRequestRuleCreated) Error() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/tcp_request_rules][%d] createTcpRequestRuleCreated  %+v", 201, o.Payload)
}
func (o *CreateTCPRequestRuleCreated) GetPayload() *models.TCPRequestRule {
	return o.Payload
}

func (o *CreateTCPRequestRuleCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.TCPRequestRule)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateTCPRequestRuleAccepted creates a CreateTCPRequestRuleAccepted with default headers values
func NewCreateTCPRequestRuleAccepted() *CreateTCPRequestRuleAccepted {
	return &CreateTCPRequestRuleAccepted{}
}

/* CreateTCPRequestRuleAccepted describes a response with status code 202, with default header values.

Configuration change accepted and reload requested
*/
type CreateTCPRequestRuleAccepted struct {

	/* ID of the requested reload
	 */
	ReloadID string

	Payload *models.TCPRequestRule
}

func (o *CreateTCPRequestRuleAccepted) Error() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/tcp_request_rules][%d] createTcpRequestRuleAccepted  %+v", 202, o.Payload)
}
func (o *CreateTCPRequestRuleAccepted) GetPayload() *models.TCPRequestRule {
	return o.Payload
}

func (o *CreateTCPRequestRuleAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Reload-ID
	hdrReloadID := response.GetHeader("Reload-ID")

	if hdrReloadID != "" {
		o.ReloadID = hdrReloadID
	}

	o.Payload = new(models.TCPRequestRule)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateTCPRequestRuleBadRequest creates a CreateTCPRequestRuleBadRequest with default headers values
func NewCreateTCPRequestRuleBadRequest() *CreateTCPRequestRuleBadRequest {
	return &CreateTCPRequestRuleBadRequest{}
}

/* CreateTCPRequestRuleBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type CreateTCPRequestRuleBadRequest struct {

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

func (o *CreateTCPRequestRuleBadRequest) Error() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/tcp_request_rules][%d] createTcpRequestRuleBadRequest  %+v", 400, o.Payload)
}
func (o *CreateTCPRequestRuleBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateTCPRequestRuleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateTCPRequestRuleConflict creates a CreateTCPRequestRuleConflict with default headers values
func NewCreateTCPRequestRuleConflict() *CreateTCPRequestRuleConflict {
	return &CreateTCPRequestRuleConflict{}
}

/* CreateTCPRequestRuleConflict describes a response with status code 409, with default header values.

The specified resource already exists
*/
type CreateTCPRequestRuleConflict struct {

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

func (o *CreateTCPRequestRuleConflict) Error() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/tcp_request_rules][%d] createTcpRequestRuleConflict  %+v", 409, o.Payload)
}
func (o *CreateTCPRequestRuleConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateTCPRequestRuleConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateTCPRequestRuleDefault creates a CreateTCPRequestRuleDefault with default headers values
func NewCreateTCPRequestRuleDefault(code int) *CreateTCPRequestRuleDefault {
	return &CreateTCPRequestRuleDefault{
		_statusCode: code,
	}
}

/* CreateTCPRequestRuleDefault describes a response with status code -1, with default header values.

General Error
*/
type CreateTCPRequestRuleDefault struct {
	_statusCode int

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models.Error
}

// Code gets the status code for the create TCP request rule default response
func (o *CreateTCPRequestRuleDefault) Code() int {
	return o._statusCode
}

func (o *CreateTCPRequestRuleDefault) Error() string {
	return fmt.Sprintf("[POST /services/haproxy/configuration/tcp_request_rules][%d] createTCPRequestRule default  %+v", o._statusCode, o.Payload)
}
func (o *CreateTCPRequestRuleDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *CreateTCPRequestRuleDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
