// Code generated by go-swagger; DO NOT EDIT.

package filter

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new filter API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for filter API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateFilter(params *CreateFilterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateFilterCreated, *CreateFilterAccepted, error)

	DeleteFilter(params *DeleteFilterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteFilterAccepted, *DeleteFilterNoContent, error)

	GetFilter(params *GetFilterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFilterOK, error)

	GetFilters(params *GetFiltersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFiltersOK, error)

	ReplaceFilter(params *ReplaceFilterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReplaceFilterOK, *ReplaceFilterAccepted, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateFilter adds a new filter

  Adds a new Filter of the specified type in the specified parent.
*/
func (a *Client) CreateFilter(params *CreateFilterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateFilterCreated, *CreateFilterAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateFilterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createFilter",
		Method:             "POST",
		PathPattern:        "/services/haproxy/configuration/filters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateFilterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateFilterCreated:
		return value, nil, nil
	case *CreateFilterAccepted:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateFilterDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteFilter deletes a filter

  Deletes a Filter configuration by it's index from the specified parent.
*/
func (a *Client) DeleteFilter(params *DeleteFilterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteFilterAccepted, *DeleteFilterNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteFilterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteFilter",
		Method:             "DELETE",
		PathPattern:        "/services/haproxy/configuration/filters/{index}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteFilterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteFilterAccepted:
		return value, nil, nil
	case *DeleteFilterNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteFilterDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetFilter returns one filter

  Returns one Filter configuration by it's index in the specified parent.
*/
func (a *Client) GetFilter(params *GetFilterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFilterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFilterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFilter",
		Method:             "GET",
		PathPattern:        "/services/haproxy/configuration/filters/{index}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetFilterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFilterOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetFilterDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetFilters returns an array of all filters

  Returns all Filters that are configured in specified parent.
*/
func (a *Client) GetFilters(params *GetFiltersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFiltersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFiltersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFilters",
		Method:             "GET",
		PathPattern:        "/services/haproxy/configuration/filters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetFiltersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFiltersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetFiltersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ReplaceFilter replaces a filter

  Replaces a Filter configuration by it's index in the specified parent.
*/
func (a *Client) ReplaceFilter(params *ReplaceFilterParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReplaceFilterOK, *ReplaceFilterAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceFilterParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "replaceFilter",
		Method:             "PUT",
		PathPattern:        "/services/haproxy/configuration/filters/{index}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceFilterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceFilterOK:
		return value, nil, nil
	case *ReplaceFilterAccepted:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReplaceFilterDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
