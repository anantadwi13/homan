// Code generated by go-swagger; DO NOT EDIT.

package stick_table

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetStickTableEntriesParams creates a new GetStickTableEntriesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetStickTableEntriesParams() *GetStickTableEntriesParams {
	return &GetStickTableEntriesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetStickTableEntriesParamsWithTimeout creates a new GetStickTableEntriesParams object
// with the ability to set a timeout on a request.
func NewGetStickTableEntriesParamsWithTimeout(timeout time.Duration) *GetStickTableEntriesParams {
	return &GetStickTableEntriesParams{
		timeout: timeout,
	}
}

// NewGetStickTableEntriesParamsWithContext creates a new GetStickTableEntriesParams object
// with the ability to set a context for a request.
func NewGetStickTableEntriesParamsWithContext(ctx context.Context) *GetStickTableEntriesParams {
	return &GetStickTableEntriesParams{
		Context: ctx,
	}
}

// NewGetStickTableEntriesParamsWithHTTPClient creates a new GetStickTableEntriesParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetStickTableEntriesParamsWithHTTPClient(client *http.Client) *GetStickTableEntriesParams {
	return &GetStickTableEntriesParams{
		HTTPClient: client,
	}
}

/* GetStickTableEntriesParams contains all the parameters to send to the API endpoint
   for the get stick table entries operation.

   Typically these are written to a http.Request.
*/
type GetStickTableEntriesParams struct {

	/* Count.

	   Max number of entries to be returned for pagination
	*/
	Count *int64

	/* Filter.

	   A list of filters in format data.<type> <operator> <value> separated by comma
	*/
	Filter *string

	/* Key.

	   Key which we want the entries for
	*/
	Key *string

	/* Offset.

	   Offset which indicates how many items we skip in pagination
	*/
	Offset *int64

	/* Process.

	   Process number if master-worker mode, if not only first process is returned
	*/
	Process int64

	/* StickTable.

	   Stick table name
	*/
	StickTable string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get stick table entries params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetStickTableEntriesParams) WithDefaults() *GetStickTableEntriesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get stick table entries params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetStickTableEntriesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get stick table entries params
func (o *GetStickTableEntriesParams) WithTimeout(timeout time.Duration) *GetStickTableEntriesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get stick table entries params
func (o *GetStickTableEntriesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get stick table entries params
func (o *GetStickTableEntriesParams) WithContext(ctx context.Context) *GetStickTableEntriesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get stick table entries params
func (o *GetStickTableEntriesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get stick table entries params
func (o *GetStickTableEntriesParams) WithHTTPClient(client *http.Client) *GetStickTableEntriesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get stick table entries params
func (o *GetStickTableEntriesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCount adds the count to the get stick table entries params
func (o *GetStickTableEntriesParams) WithCount(count *int64) *GetStickTableEntriesParams {
	o.SetCount(count)
	return o
}

// SetCount adds the count to the get stick table entries params
func (o *GetStickTableEntriesParams) SetCount(count *int64) {
	o.Count = count
}

// WithFilter adds the filter to the get stick table entries params
func (o *GetStickTableEntriesParams) WithFilter(filter *string) *GetStickTableEntriesParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the get stick table entries params
func (o *GetStickTableEntriesParams) SetFilter(filter *string) {
	o.Filter = filter
}

// WithKey adds the key to the get stick table entries params
func (o *GetStickTableEntriesParams) WithKey(key *string) *GetStickTableEntriesParams {
	o.SetKey(key)
	return o
}

// SetKey adds the key to the get stick table entries params
func (o *GetStickTableEntriesParams) SetKey(key *string) {
	o.Key = key
}

// WithOffset adds the offset to the get stick table entries params
func (o *GetStickTableEntriesParams) WithOffset(offset *int64) *GetStickTableEntriesParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get stick table entries params
func (o *GetStickTableEntriesParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithProcess adds the process to the get stick table entries params
func (o *GetStickTableEntriesParams) WithProcess(process int64) *GetStickTableEntriesParams {
	o.SetProcess(process)
	return o
}

// SetProcess adds the process to the get stick table entries params
func (o *GetStickTableEntriesParams) SetProcess(process int64) {
	o.Process = process
}

// WithStickTable adds the stickTable to the get stick table entries params
func (o *GetStickTableEntriesParams) WithStickTable(stickTable string) *GetStickTableEntriesParams {
	o.SetStickTable(stickTable)
	return o
}

// SetStickTable adds the stickTable to the get stick table entries params
func (o *GetStickTableEntriesParams) SetStickTable(stickTable string) {
	o.StickTable = stickTable
}

// WriteToRequest writes these params to a swagger request
func (o *GetStickTableEntriesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Count != nil {

		// query param count
		var qrCount int64

		if o.Count != nil {
			qrCount = *o.Count
		}
		qCount := swag.FormatInt64(qrCount)
		if qCount != "" {

			if err := r.SetQueryParam("count", qCount); err != nil {
				return err
			}
		}
	}

	if o.Filter != nil {

		// query param filter
		var qrFilter string

		if o.Filter != nil {
			qrFilter = *o.Filter
		}
		qFilter := qrFilter
		if qFilter != "" {

			if err := r.SetQueryParam("filter", qFilter); err != nil {
				return err
			}
		}
	}

	if o.Key != nil {

		// query param key
		var qrKey string

		if o.Key != nil {
			qrKey = *o.Key
		}
		qKey := qrKey
		if qKey != "" {

			if err := r.SetQueryParam("key", qKey); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	// query param process
	qrProcess := o.Process
	qProcess := swag.FormatInt64(qrProcess)
	if qProcess != "" {

		if err := r.SetQueryParam("process", qProcess); err != nil {
			return err
		}
	}

	// query param stick_table
	qrStickTable := o.StickTable
	qStickTable := qrStickTable
	if qStickTable != "" {

		if err := r.SetQueryParam("stick_table", qStickTable); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
