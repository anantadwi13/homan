// Code generated by go-swagger; DO NOT EDIT.

package stick_rule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDeleteStickRuleParams creates a new DeleteStickRuleParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDeleteStickRuleParams() *DeleteStickRuleParams {
	return &DeleteStickRuleParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteStickRuleParamsWithTimeout creates a new DeleteStickRuleParams object
// with the ability to set a timeout on a request.
func NewDeleteStickRuleParamsWithTimeout(timeout time.Duration) *DeleteStickRuleParams {
	return &DeleteStickRuleParams{
		timeout: timeout,
	}
}

// NewDeleteStickRuleParamsWithContext creates a new DeleteStickRuleParams object
// with the ability to set a context for a request.
func NewDeleteStickRuleParamsWithContext(ctx context.Context) *DeleteStickRuleParams {
	return &DeleteStickRuleParams{
		Context: ctx,
	}
}

// NewDeleteStickRuleParamsWithHTTPClient creates a new DeleteStickRuleParams object
// with the ability to set a custom HTTPClient for a request.
func NewDeleteStickRuleParamsWithHTTPClient(client *http.Client) *DeleteStickRuleParams {
	return &DeleteStickRuleParams{
		HTTPClient: client,
	}
}

/* DeleteStickRuleParams contains all the parameters to send to the API endpoint
   for the delete stick rule operation.

   Typically these are written to a http.Request.
*/
type DeleteStickRuleParams struct {

	/* Backend.

	   Backend name
	*/
	Backend string

	/* ForceReload.

	   If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	*/
	ForceReload *bool

	/* Index.

	   Stick Rule Index
	*/
	Index int64

	/* TransactionID.

	   ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	*/
	TransactionID *string

	/* Version.

	   Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	*/
	Version *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the delete stick rule params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteStickRuleParams) WithDefaults() *DeleteStickRuleParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the delete stick rule params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteStickRuleParams) SetDefaults() {
	var (
		forceReloadDefault = bool(false)
	)

	val := DeleteStickRuleParams{
		ForceReload: &forceReloadDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the delete stick rule params
func (o *DeleteStickRuleParams) WithTimeout(timeout time.Duration) *DeleteStickRuleParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete stick rule params
func (o *DeleteStickRuleParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete stick rule params
func (o *DeleteStickRuleParams) WithContext(ctx context.Context) *DeleteStickRuleParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete stick rule params
func (o *DeleteStickRuleParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete stick rule params
func (o *DeleteStickRuleParams) WithHTTPClient(client *http.Client) *DeleteStickRuleParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete stick rule params
func (o *DeleteStickRuleParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBackend adds the backend to the delete stick rule params
func (o *DeleteStickRuleParams) WithBackend(backend string) *DeleteStickRuleParams {
	o.SetBackend(backend)
	return o
}

// SetBackend adds the backend to the delete stick rule params
func (o *DeleteStickRuleParams) SetBackend(backend string) {
	o.Backend = backend
}

// WithForceReload adds the forceReload to the delete stick rule params
func (o *DeleteStickRuleParams) WithForceReload(forceReload *bool) *DeleteStickRuleParams {
	o.SetForceReload(forceReload)
	return o
}

// SetForceReload adds the forceReload to the delete stick rule params
func (o *DeleteStickRuleParams) SetForceReload(forceReload *bool) {
	o.ForceReload = forceReload
}

// WithIndex adds the index to the delete stick rule params
func (o *DeleteStickRuleParams) WithIndex(index int64) *DeleteStickRuleParams {
	o.SetIndex(index)
	return o
}

// SetIndex adds the index to the delete stick rule params
func (o *DeleteStickRuleParams) SetIndex(index int64) {
	o.Index = index
}

// WithTransactionID adds the transactionID to the delete stick rule params
func (o *DeleteStickRuleParams) WithTransactionID(transactionID *string) *DeleteStickRuleParams {
	o.SetTransactionID(transactionID)
	return o
}

// SetTransactionID adds the transactionId to the delete stick rule params
func (o *DeleteStickRuleParams) SetTransactionID(transactionID *string) {
	o.TransactionID = transactionID
}

// WithVersion adds the version to the delete stick rule params
func (o *DeleteStickRuleParams) WithVersion(version *int64) *DeleteStickRuleParams {
	o.SetVersion(version)
	return o
}

// SetVersion adds the version to the delete stick rule params
func (o *DeleteStickRuleParams) SetVersion(version *int64) {
	o.Version = version
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteStickRuleParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param backend
	qrBackend := o.Backend
	qBackend := qrBackend
	if qBackend != "" {

		if err := r.SetQueryParam("backend", qBackend); err != nil {
			return err
		}
	}

	if o.ForceReload != nil {

		// query param force_reload
		var qrForceReload bool

		if o.ForceReload != nil {
			qrForceReload = *o.ForceReload
		}
		qForceReload := swag.FormatBool(qrForceReload)
		if qForceReload != "" {

			if err := r.SetQueryParam("force_reload", qForceReload); err != nil {
				return err
			}
		}
	}

	// path param index
	if err := r.SetPathParam("index", swag.FormatInt64(o.Index)); err != nil {
		return err
	}

	if o.TransactionID != nil {

		// query param transaction_id
		var qrTransactionID string

		if o.TransactionID != nil {
			qrTransactionID = *o.TransactionID
		}
		qTransactionID := qrTransactionID
		if qTransactionID != "" {

			if err := r.SetQueryParam("transaction_id", qTransactionID); err != nil {
				return err
			}
		}
	}

	if o.Version != nil {

		// query param version
		var qrVersion int64

		if o.Version != nil {
			qrVersion = *o.Version
		}
		qVersion := swag.FormatInt64(qrVersion)
		if qVersion != "" {

			if err := r.SetQueryParam("version", qVersion); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
