// Code generated by go-swagger; DO NOT EDIT.

package peer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new peer API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for peer API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreatePeer(params *CreatePeerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreatePeerCreated, *CreatePeerAccepted, error)

	DeletePeer(params *DeletePeerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeletePeerAccepted, *DeletePeerNoContent, error)

	GetPeerSection(params *GetPeerSectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPeerSectionOK, error)

	GetPeerSections(params *GetPeerSectionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPeerSectionsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreatePeer adds a peer

  Adds a new peer to the configuration file.
*/
func (a *Client) CreatePeer(params *CreatePeerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreatePeerCreated, *CreatePeerAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePeerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createPeer",
		Method:             "POST",
		PathPattern:        "/services/haproxy/configuration/peer_section",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreatePeerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreatePeerCreated:
		return value, nil, nil
	case *CreatePeerAccepted:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreatePeerDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeletePeer deletes a peer

  Deletes a peer from the configuration by it's name.
*/
func (a *Client) DeletePeer(params *DeletePeerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeletePeerAccepted, *DeletePeerNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePeerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deletePeer",
		Method:             "DELETE",
		PathPattern:        "/services/haproxy/configuration/peer_section/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeletePeerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeletePeerAccepted:
		return value, nil, nil
	case *DeletePeerNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeletePeerDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetPeerSection returns a peer

  Returns one peer configuration by it's name.
*/
func (a *Client) GetPeerSection(params *GetPeerSectionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPeerSectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPeerSectionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPeerSection",
		Method:             "GET",
		PathPattern:        "/services/haproxy/configuration/peer_section/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPeerSectionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPeerSectionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetPeerSectionDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetPeerSections returns an array of peer section

  Returns an array of all configured peer_section.
*/
func (a *Client) GetPeerSections(params *GetPeerSectionsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetPeerSectionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPeerSectionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPeerSections",
		Method:             "GET",
		PathPattern:        "/services/haproxy/configuration/peer_section",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPeerSectionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPeerSectionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetPeerSectionsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
