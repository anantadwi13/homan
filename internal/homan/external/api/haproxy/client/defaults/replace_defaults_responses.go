// Code generated by go-swagger; DO NOT EDIT.

package defaults

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	models2 "github.com/anantadwi13/homan/internal/homan/external/api/haproxy/models"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// ReplaceDefaultsReader is a Reader for the ReplaceDefaults structure.
type ReplaceDefaultsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReplaceDefaultsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewReplaceDefaultsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewReplaceDefaultsAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewReplaceDefaultsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewReplaceDefaultsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewReplaceDefaultsOK creates a ReplaceDefaultsOK with default headers values
func NewReplaceDefaultsOK() *ReplaceDefaultsOK {
	return &ReplaceDefaultsOK{}
}

/* ReplaceDefaultsOK describes a response with status code 200, with default header values.

Defaults replaced
*/
type ReplaceDefaultsOK struct {
	Payload *models2.Defaults
}

func (o *ReplaceDefaultsOK) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/defaults][%d] replaceDefaultsOK  %+v", 200, o.Payload)
}
func (o *ReplaceDefaultsOK) GetPayload() *models2.Defaults {
	return o.Payload
}

func (o *ReplaceDefaultsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models2.Defaults)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceDefaultsAccepted creates a ReplaceDefaultsAccepted with default headers values
func NewReplaceDefaultsAccepted() *ReplaceDefaultsAccepted {
	return &ReplaceDefaultsAccepted{}
}

/* ReplaceDefaultsAccepted describes a response with status code 202, with default header values.

Configuration change accepted and reload requested
*/
type ReplaceDefaultsAccepted struct {

	/* ID of the requested reload
	 */
	ReloadID string

	Payload *models2.Defaults
}

func (o *ReplaceDefaultsAccepted) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/defaults][%d] replaceDefaultsAccepted  %+v", 202, o.Payload)
}
func (o *ReplaceDefaultsAccepted) GetPayload() *models2.Defaults {
	return o.Payload
}

func (o *ReplaceDefaultsAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Reload-ID
	hdrReloadID := response.GetHeader("Reload-ID")

	if hdrReloadID != "" {
		o.ReloadID = hdrReloadID
	}

	o.Payload = new(models2.Defaults)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceDefaultsBadRequest creates a ReplaceDefaultsBadRequest with default headers values
func NewReplaceDefaultsBadRequest() *ReplaceDefaultsBadRequest {
	return &ReplaceDefaultsBadRequest{}
}

/* ReplaceDefaultsBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type ReplaceDefaultsBadRequest struct {

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models2.Error
}

func (o *ReplaceDefaultsBadRequest) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/defaults][%d] replaceDefaultsBadRequest  %+v", 400, o.Payload)
}
func (o *ReplaceDefaultsBadRequest) GetPayload() *models2.Error {
	return o.Payload
}

func (o *ReplaceDefaultsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models2.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceDefaultsDefault creates a ReplaceDefaultsDefault with default headers values
func NewReplaceDefaultsDefault(code int) *ReplaceDefaultsDefault {
	return &ReplaceDefaultsDefault{
		_statusCode: code,
	}
}

/* ReplaceDefaultsDefault describes a response with status code -1, with default header values.

General Error
*/
type ReplaceDefaultsDefault struct {
	_statusCode int

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models2.Error
}

// Code gets the status code for the replace defaults default response
func (o *ReplaceDefaultsDefault) Code() int {
	return o._statusCode
}

func (o *ReplaceDefaultsDefault) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/configuration/defaults][%d] replaceDefaults default  %+v", o._statusCode, o.Payload)
}
func (o *ReplaceDefaultsDefault) GetPayload() *models2.Error {
	return o.Payload
}

func (o *ReplaceDefaultsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models2.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
