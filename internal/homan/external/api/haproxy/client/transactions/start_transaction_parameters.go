// Code generated by go-swagger; DO NOT EDIT.

package transactions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewStartTransactionParams creates a new StartTransactionParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewStartTransactionParams() *StartTransactionParams {
	return &StartTransactionParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewStartTransactionParamsWithTimeout creates a new StartTransactionParams object
// with the ability to set a timeout on a request.
func NewStartTransactionParamsWithTimeout(timeout time.Duration) *StartTransactionParams {
	return &StartTransactionParams{
		timeout: timeout,
	}
}

// NewStartTransactionParamsWithContext creates a new StartTransactionParams object
// with the ability to set a context for a request.
func NewStartTransactionParamsWithContext(ctx context.Context) *StartTransactionParams {
	return &StartTransactionParams{
		Context: ctx,
	}
}

// NewStartTransactionParamsWithHTTPClient creates a new StartTransactionParams object
// with the ability to set a custom HTTPClient for a request.
func NewStartTransactionParamsWithHTTPClient(client *http.Client) *StartTransactionParams {
	return &StartTransactionParams{
		HTTPClient: client,
	}
}

/* StartTransactionParams contains all the parameters to send to the API endpoint
   for the start transaction operation.

   Typically these are written to a http.Request.
*/
type StartTransactionParams struct {

	/* Version.

	   Configuration version on which to work on
	*/
	Version int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the start transaction params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *StartTransactionParams) WithDefaults() *StartTransactionParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the start transaction params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *StartTransactionParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the start transaction params
func (o *StartTransactionParams) WithTimeout(timeout time.Duration) *StartTransactionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the start transaction params
func (o *StartTransactionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the start transaction params
func (o *StartTransactionParams) WithContext(ctx context.Context) *StartTransactionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the start transaction params
func (o *StartTransactionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the start transaction params
func (o *StartTransactionParams) WithHTTPClient(client *http.Client) *StartTransactionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the start transaction params
func (o *StartTransactionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithVersion adds the version to the start transaction params
func (o *StartTransactionParams) WithVersion(version int64) *StartTransactionParams {
	o.SetVersion(version)
	return o
}

// SetVersion adds the version to the start transaction params
func (o *StartTransactionParams) SetVersion(version int64) {
	o.Version = version
}

// WriteToRequest writes these params to a swagger request
func (o *StartTransactionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param version
	qrVersion := o.Version
	qVersion := swag.FormatInt64(qrVersion)
	if qVersion != "" {

		if err := r.SetQueryParam("version", qVersion); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
