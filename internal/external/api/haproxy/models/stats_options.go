// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StatsOptions stats options
//
// swagger:model stats_options
type StatsOptions struct {

	// stats enable
	StatsEnable bool `json:"stats_enable,omitempty"`

	// stats hide version
	StatsHideVersion bool `json:"stats_hide_version,omitempty"`

	// stats maxconn
	// Minimum: 1
	StatsMaxconn int64 `json:"stats_maxconn,omitempty"`

	// stats refresh delay
	StatsRefreshDelay *int64 `json:"stats_refresh_delay,omitempty"`

	// stats show desc
	StatsShowDesc *string `json:"stats_show_desc,omitempty"`

	// stats show legends
	StatsShowLegends bool `json:"stats_show_legends,omitempty"`

	// stats show node name
	// Pattern: ^[^\s]+$
	StatsShowNodeName *string `json:"stats_show_node_name,omitempty"`

	// stats uri prefix
	// Pattern: ^[^\s]+$
	StatsURIPrefix string `json:"stats_uri_prefix,omitempty"`
}

// Validate validates this stats options
func (m *StatsOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatsMaxconn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatsShowNodeName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatsURIPrefix(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StatsOptions) validateStatsMaxconn(formats strfmt.Registry) error {
	if swag.IsZero(m.StatsMaxconn) { // not required
		return nil
	}

	if err := validate.MinimumInt("stats_maxconn", "body", m.StatsMaxconn, 1, false); err != nil {
		return err
	}

	return nil
}

func (m *StatsOptions) validateStatsShowNodeName(formats strfmt.Registry) error {
	if swag.IsZero(m.StatsShowNodeName) { // not required
		return nil
	}

	if err := validate.Pattern("stats_show_node_name", "body", *m.StatsShowNodeName, `^[^\s]+$`); err != nil {
		return err
	}

	return nil
}

func (m *StatsOptions) validateStatsURIPrefix(formats strfmt.Registry) error {
	if swag.IsZero(m.StatsURIPrefix) { // not required
		return nil
	}

	if err := validate.Pattern("stats_uri_prefix", "body", m.StatsURIPrefix, `^[^\s]+$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this stats options based on context it is used
func (m *StatsOptions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StatsOptions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StatsOptions) UnmarshalBinary(b []byte) error {
	var res StatsOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
