// Code generated by go-swagger; DO NOT EDIT.

package nameserver

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new nameserver API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for nameserver API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateNameserver(params *CreateNameserverParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateNameserverCreated, *CreateNameserverAccepted, error)

	DeleteNameserver(params *DeleteNameserverParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNameserverAccepted, *DeleteNameserverNoContent, error)

	GetNameserver(params *GetNameserverParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNameserverOK, error)

	GetNameservers(params *GetNameserversParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNameserversOK, error)

	ReplaceNameserver(params *ReplaceNameserverParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReplaceNameserverOK, *ReplaceNameserverAccepted, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateNameserver adds a nameserver

  Adds a new nameserver to the resolvers section.
*/
func (a *Client) CreateNameserver(params *CreateNameserverParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateNameserverCreated, *CreateNameserverAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNameserverParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createNameserver",
		Method:             "POST",
		PathPattern:        "/services/haproxy/configuration/nameservers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateNameserverReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateNameserverCreated:
		return value, nil, nil
	case *CreateNameserverAccepted:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateNameserverDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteNameserver deletes a nameserver

  Deletes a nameserver from the resolvers section by it's name.
*/
func (a *Client) DeleteNameserver(params *DeleteNameserverParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteNameserverAccepted, *DeleteNameserverNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNameserverParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteNameserver",
		Method:             "DELETE",
		PathPattern:        "/services/haproxy/configuration/nameservers/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteNameserverReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteNameserverAccepted:
		return value, nil, nil
	case *DeleteNameserverNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteNameserverDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetNameserver returns a nameserver

  Returns one nameserver configuration by it's name.
*/
func (a *Client) GetNameserver(params *GetNameserverParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNameserverOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNameserverParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNameserver",
		Method:             "GET",
		PathPattern:        "/services/haproxy/configuration/nameservers/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNameserverReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNameserverOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetNameserverDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetNameservers returns an array of nameservers

  Returns an array of all configured nameservers.
*/
func (a *Client) GetNameservers(params *GetNameserversParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetNameserversOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNameserversParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNameservers",
		Method:             "GET",
		PathPattern:        "/services/haproxy/configuration/nameservers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetNameserversReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNameserversOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetNameserversDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ReplaceNameserver replaces a nameserver

  Replaces a nameserver configuration by it's name.
*/
func (a *Client) ReplaceNameserver(params *ReplaceNameserverParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReplaceNameserverOK, *ReplaceNameserverAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceNameserverParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "replaceNameserver",
		Method:             "PUT",
		PathPattern:        "/services/haproxy/configuration/nameservers/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceNameserverReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceNameserverOK:
		return value, nil, nil
	case *ReplaceNameserverAccepted:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReplaceNameserverDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
