// Code generated by go-swagger; DO NOT EDIT.

package configuration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewPostHAProxyConfigurationParams creates a new PostHAProxyConfigurationParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPostHAProxyConfigurationParams() *PostHAProxyConfigurationParams {
	return &PostHAProxyConfigurationParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPostHAProxyConfigurationParamsWithTimeout creates a new PostHAProxyConfigurationParams object
// with the ability to set a timeout on a request.
func NewPostHAProxyConfigurationParamsWithTimeout(timeout time.Duration) *PostHAProxyConfigurationParams {
	return &PostHAProxyConfigurationParams{
		timeout: timeout,
	}
}

// NewPostHAProxyConfigurationParamsWithContext creates a new PostHAProxyConfigurationParams object
// with the ability to set a context for a request.
func NewPostHAProxyConfigurationParamsWithContext(ctx context.Context) *PostHAProxyConfigurationParams {
	return &PostHAProxyConfigurationParams{
		Context: ctx,
	}
}

// NewPostHAProxyConfigurationParamsWithHTTPClient creates a new PostHAProxyConfigurationParams object
// with the ability to set a custom HTTPClient for a request.
func NewPostHAProxyConfigurationParamsWithHTTPClient(client *http.Client) *PostHAProxyConfigurationParams {
	return &PostHAProxyConfigurationParams{
		HTTPClient: client,
	}
}

/* PostHAProxyConfigurationParams contains all the parameters to send to the API endpoint
   for the post h a proxy configuration operation.

   Typically these are written to a http.Request.
*/
type PostHAProxyConfigurationParams struct {

	/* XRuntimeActions.

	   List of Runtime API commands with parameters separated by ';'
	*/
	XRuntimeActions *string

	// Data.
	Data string

	/* ForceReload.

	   If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	*/
	ForceReload *bool

	/* OnlyValidate.

	   If set, only validates configuration, without applying it
	*/
	OnlyValidate *bool

	/* SkipReload.

	   If set, no reload will be initiated and runtime actions from X-Runtime-Actions will be applied
	*/
	SkipReload *bool

	/* SkipVersion.

	   If set, no version check will be done and the pushed config will be enforced
	*/
	SkipVersion *bool

	/* Version.

	   Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	*/
	Version *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the post h a proxy configuration params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PostHAProxyConfigurationParams) WithDefaults() *PostHAProxyConfigurationParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the post h a proxy configuration params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PostHAProxyConfigurationParams) SetDefaults() {
	var (
		forceReloadDefault = bool(false)

		onlyValidateDefault = bool(false)

		skipReloadDefault = bool(false)

		skipVersionDefault = bool(false)
	)

	val := PostHAProxyConfigurationParams{
		ForceReload:  &forceReloadDefault,
		OnlyValidate: &onlyValidateDefault,
		SkipReload:   &skipReloadDefault,
		SkipVersion:  &skipVersionDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the post h a proxy configuration params
func (o *PostHAProxyConfigurationParams) WithTimeout(timeout time.Duration) *PostHAProxyConfigurationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post h a proxy configuration params
func (o *PostHAProxyConfigurationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post h a proxy configuration params
func (o *PostHAProxyConfigurationParams) WithContext(ctx context.Context) *PostHAProxyConfigurationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post h a proxy configuration params
func (o *PostHAProxyConfigurationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post h a proxy configuration params
func (o *PostHAProxyConfigurationParams) WithHTTPClient(client *http.Client) *PostHAProxyConfigurationParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post h a proxy configuration params
func (o *PostHAProxyConfigurationParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXRuntimeActions adds the xRuntimeActions to the post h a proxy configuration params
func (o *PostHAProxyConfigurationParams) WithXRuntimeActions(xRuntimeActions *string) *PostHAProxyConfigurationParams {
	o.SetXRuntimeActions(xRuntimeActions)
	return o
}

// SetXRuntimeActions adds the xRuntimeActions to the post h a proxy configuration params
func (o *PostHAProxyConfigurationParams) SetXRuntimeActions(xRuntimeActions *string) {
	o.XRuntimeActions = xRuntimeActions
}

// WithData adds the data to the post h a proxy configuration params
func (o *PostHAProxyConfigurationParams) WithData(data string) *PostHAProxyConfigurationParams {
	o.SetData(data)
	return o
}

// SetData adds the data to the post h a proxy configuration params
func (o *PostHAProxyConfigurationParams) SetData(data string) {
	o.Data = data
}

// WithForceReload adds the forceReload to the post h a proxy configuration params
func (o *PostHAProxyConfigurationParams) WithForceReload(forceReload *bool) *PostHAProxyConfigurationParams {
	o.SetForceReload(forceReload)
	return o
}

// SetForceReload adds the forceReload to the post h a proxy configuration params
func (o *PostHAProxyConfigurationParams) SetForceReload(forceReload *bool) {
	o.ForceReload = forceReload
}

// WithOnlyValidate adds the onlyValidate to the post h a proxy configuration params
func (o *PostHAProxyConfigurationParams) WithOnlyValidate(onlyValidate *bool) *PostHAProxyConfigurationParams {
	o.SetOnlyValidate(onlyValidate)
	return o
}

// SetOnlyValidate adds the onlyValidate to the post h a proxy configuration params
func (o *PostHAProxyConfigurationParams) SetOnlyValidate(onlyValidate *bool) {
	o.OnlyValidate = onlyValidate
}

// WithSkipReload adds the skipReload to the post h a proxy configuration params
func (o *PostHAProxyConfigurationParams) WithSkipReload(skipReload *bool) *PostHAProxyConfigurationParams {
	o.SetSkipReload(skipReload)
	return o
}

// SetSkipReload adds the skipReload to the post h a proxy configuration params
func (o *PostHAProxyConfigurationParams) SetSkipReload(skipReload *bool) {
	o.SkipReload = skipReload
}

// WithSkipVersion adds the skipVersion to the post h a proxy configuration params
func (o *PostHAProxyConfigurationParams) WithSkipVersion(skipVersion *bool) *PostHAProxyConfigurationParams {
	o.SetSkipVersion(skipVersion)
	return o
}

// SetSkipVersion adds the skipVersion to the post h a proxy configuration params
func (o *PostHAProxyConfigurationParams) SetSkipVersion(skipVersion *bool) {
	o.SkipVersion = skipVersion
}

// WithVersion adds the version to the post h a proxy configuration params
func (o *PostHAProxyConfigurationParams) WithVersion(version *int64) *PostHAProxyConfigurationParams {
	o.SetVersion(version)
	return o
}

// SetVersion adds the version to the post h a proxy configuration params
func (o *PostHAProxyConfigurationParams) SetVersion(version *int64) {
	o.Version = version
}

// WriteToRequest writes these params to a swagger request
func (o *PostHAProxyConfigurationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.XRuntimeActions != nil {

		// header param X-Runtime-Actions
		if err := r.SetHeaderParam("X-Runtime-Actions", *o.XRuntimeActions); err != nil {
			return err
		}
	}
	if err := r.SetBodyParam(o.Data); err != nil {
		return err
	}

	if o.ForceReload != nil {

		// query param force_reload
		var qrForceReload bool

		if o.ForceReload != nil {
			qrForceReload = *o.ForceReload
		}
		qForceReload := swag.FormatBool(qrForceReload)
		if qForceReload != "" {

			if err := r.SetQueryParam("force_reload", qForceReload); err != nil {
				return err
			}
		}
	}

	if o.OnlyValidate != nil {

		// query param only_validate
		var qrOnlyValidate bool

		if o.OnlyValidate != nil {
			qrOnlyValidate = *o.OnlyValidate
		}
		qOnlyValidate := swag.FormatBool(qrOnlyValidate)
		if qOnlyValidate != "" {

			if err := r.SetQueryParam("only_validate", qOnlyValidate); err != nil {
				return err
			}
		}
	}

	if o.SkipReload != nil {

		// query param skip_reload
		var qrSkipReload bool

		if o.SkipReload != nil {
			qrSkipReload = *o.SkipReload
		}
		qSkipReload := swag.FormatBool(qrSkipReload)
		if qSkipReload != "" {

			if err := r.SetQueryParam("skip_reload", qSkipReload); err != nil {
				return err
			}
		}
	}

	if o.SkipVersion != nil {

		// query param skip_version
		var qrSkipVersion bool

		if o.SkipVersion != nil {
			qrSkipVersion = *o.SkipVersion
		}
		qSkipVersion := swag.FormatBool(qrSkipVersion)
		if qSkipVersion != "" {

			if err := r.SetQueryParam("skip_version", qSkipVersion); err != nil {
				return err
			}
		}
	}

	if o.Version != nil {

		// query param version
		var qrVersion int64

		if o.Version != nil {
			qrVersion = *o.Version
		}
		qVersion := swag.FormatInt64(qrVersion)
		if qVersion != "" {

			if err := r.SetQueryParam("version", qVersion); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
