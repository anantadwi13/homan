// Code generated by go-swagger; DO NOT EDIT.

package sites

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	models2 "github.com/anantadwi13/cli-whm/internal/homan/external/api/haproxy/models"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetSiteReader is a Reader for the GetSite structure.
type GetSiteReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSiteReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSiteOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetSiteNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetSiteDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetSiteOK creates a GetSiteOK with default headers values
func NewGetSiteOK() *GetSiteOK {
	return &GetSiteOK{}
}

/* GetSiteOK describes a response with status code 200, with default header values.

Successful operation
*/
type GetSiteOK struct {

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *GetSiteOKBody
}

func (o *GetSiteOK) Error() string {
	return fmt.Sprintf("[GET /services/haproxy/sites/{name}][%d] getSiteOK  %+v", 200, o.Payload)
}
func (o *GetSiteOK) GetPayload() *GetSiteOKBody {
	return o.Payload
}

func (o *GetSiteOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(GetSiteOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSiteNotFound creates a GetSiteNotFound with default headers values
func NewGetSiteNotFound() *GetSiteNotFound {
	return &GetSiteNotFound{}
}

/* GetSiteNotFound describes a response with status code 404, with default header values.

The specified resource was not found
*/
type GetSiteNotFound struct {

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models2.Error
}

func (o *GetSiteNotFound) Error() string {
	return fmt.Sprintf("[GET /services/haproxy/sites/{name}][%d] getSiteNotFound  %+v", 404, o.Payload)
}
func (o *GetSiteNotFound) GetPayload() *models2.Error {
	return o.Payload
}

func (o *GetSiteNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models2.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSiteDefault creates a GetSiteDefault with default headers values
func NewGetSiteDefault(code int) *GetSiteDefault {
	return &GetSiteDefault{
		_statusCode: code,
	}
}

/* GetSiteDefault describes a response with status code -1, with default header values.

General Error
*/
type GetSiteDefault struct {
	_statusCode int

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models2.Error
}

// Code gets the status code for the get site default response
func (o *GetSiteDefault) Code() int {
	return o._statusCode
}

func (o *GetSiteDefault) Error() string {
	return fmt.Sprintf("[GET /services/haproxy/sites/{name}][%d] getSite default  %+v", o._statusCode, o.Payload)
}
func (o *GetSiteDefault) GetPayload() *models2.Error {
	return o.Payload
}

func (o *GetSiteDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models2.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetSiteOKBody get site o k body
swagger:model GetSiteOKBody
*/
type GetSiteOKBody struct {

	// version
	Version int64 `json:"_version,omitempty"`

	// data
	Data *models2.Site `json:"data,omitempty"`
}

// Validate validates this get site o k body
func (o *GetSiteOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSiteOKBody) validateData(formats strfmt.Registry) error {
	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getSiteOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get site o k body based on the context it is used
func (o *GetSiteOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSiteOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if o.Data != nil {
		if err := o.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getSiteOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSiteOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSiteOKBody) UnmarshalBinary(b []byte) error {
	var res GetSiteOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
