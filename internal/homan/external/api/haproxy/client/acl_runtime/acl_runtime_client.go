// Code generated by go-swagger; DO NOT EDIT.

package acl_runtime

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new acl runtime API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for acl runtime API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteServicesHaproxyRuntimeACLFileEntriesID(params *DeleteServicesHaproxyRuntimeACLFileEntriesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteServicesHaproxyRuntimeACLFileEntriesIDNoContent, error)

	GetServicesHaproxyRuntimeACLFileEntries(params *GetServicesHaproxyRuntimeACLFileEntriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetServicesHaproxyRuntimeACLFileEntriesOK, error)

	GetServicesHaproxyRuntimeACLFileEntriesID(params *GetServicesHaproxyRuntimeACLFileEntriesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetServicesHaproxyRuntimeACLFileEntriesIDOK, error)

	GetServicesHaproxyRuntimeAcls(params *GetServicesHaproxyRuntimeAclsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetServicesHaproxyRuntimeAclsOK, error)

	GetServicesHaproxyRuntimeAclsID(params *GetServicesHaproxyRuntimeAclsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetServicesHaproxyRuntimeAclsIDOK, error)

	PostServicesHaproxyRuntimeACLFileEntries(params *PostServicesHaproxyRuntimeACLFileEntriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostServicesHaproxyRuntimeACLFileEntriesCreated, error)

	AddPayloadRuntimeACL(params *AddPayloadRuntimeACLParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddPayloadRuntimeACLCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteServicesHaproxyRuntimeACLFileEntriesID deletes an ACL entry

  Deletes the entry from the ACL by its value using the runtime socket.
*/
func (a *Client) DeleteServicesHaproxyRuntimeACLFileEntriesID(params *DeleteServicesHaproxyRuntimeACLFileEntriesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteServicesHaproxyRuntimeACLFileEntriesIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteServicesHaproxyRuntimeACLFileEntriesIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteServicesHaproxyRuntimeACLFileEntriesID",
		Method:             "DELETE",
		PathPattern:        "/services/haproxy/runtime/acl_file_entries/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteServicesHaproxyRuntimeACLFileEntriesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteServicesHaproxyRuntimeACLFileEntriesIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteServicesHaproxyRuntimeACLFileEntriesIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetServicesHaproxyRuntimeACLFileEntries returns an ACL entries

  Returns an ACL runtime setting using the runtime socket.
*/
func (a *Client) GetServicesHaproxyRuntimeACLFileEntries(params *GetServicesHaproxyRuntimeACLFileEntriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetServicesHaproxyRuntimeACLFileEntriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServicesHaproxyRuntimeACLFileEntriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetServicesHaproxyRuntimeACLFileEntries",
		Method:             "GET",
		PathPattern:        "/services/haproxy/runtime/acl_file_entries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetServicesHaproxyRuntimeACLFileEntriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServicesHaproxyRuntimeACLFileEntriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetServicesHaproxyRuntimeACLFileEntriesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetServicesHaproxyRuntimeACLFileEntriesID returns an ACL entry

  Returns the ACL entry by its ID using the runtime socket.
*/
func (a *Client) GetServicesHaproxyRuntimeACLFileEntriesID(params *GetServicesHaproxyRuntimeACLFileEntriesIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetServicesHaproxyRuntimeACLFileEntriesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServicesHaproxyRuntimeACLFileEntriesIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetServicesHaproxyRuntimeACLFileEntriesID",
		Method:             "GET",
		PathPattern:        "/services/haproxy/runtime/acl_file_entries/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetServicesHaproxyRuntimeACLFileEntriesIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServicesHaproxyRuntimeACLFileEntriesIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetServicesHaproxyRuntimeACLFileEntriesIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetServicesHaproxyRuntimeAcls returns an array of all ACL files

  Returns all ACL files using the runtime socket.
*/
func (a *Client) GetServicesHaproxyRuntimeAcls(params *GetServicesHaproxyRuntimeAclsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetServicesHaproxyRuntimeAclsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServicesHaproxyRuntimeAclsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetServicesHaproxyRuntimeAcls",
		Method:             "GET",
		PathPattern:        "/services/haproxy/runtime/acls",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetServicesHaproxyRuntimeAclsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServicesHaproxyRuntimeAclsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetServicesHaproxyRuntimeAclsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetServicesHaproxyRuntimeAclsID returns an ACL file

  Returns an ACL file by id using the runtime socket.
*/
func (a *Client) GetServicesHaproxyRuntimeAclsID(params *GetServicesHaproxyRuntimeAclsIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetServicesHaproxyRuntimeAclsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServicesHaproxyRuntimeAclsIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetServicesHaproxyRuntimeAclsID",
		Method:             "GET",
		PathPattern:        "/services/haproxy/runtime/acls/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetServicesHaproxyRuntimeAclsIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServicesHaproxyRuntimeAclsIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetServicesHaproxyRuntimeAclsIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  PostServicesHaproxyRuntimeACLFileEntries adds entry to an ACL file

  Adds an entry into the ACL file using the runtime socket.
*/
func (a *Client) PostServicesHaproxyRuntimeACLFileEntries(params *PostServicesHaproxyRuntimeACLFileEntriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostServicesHaproxyRuntimeACLFileEntriesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostServicesHaproxyRuntimeACLFileEntriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostServicesHaproxyRuntimeACLFileEntries",
		Method:             "POST",
		PathPattern:        "/services/haproxy/runtime/acl_file_entries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostServicesHaproxyRuntimeACLFileEntriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostServicesHaproxyRuntimeACLFileEntriesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PostServicesHaproxyRuntimeACLFileEntriesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  AddPayloadRuntimeACL adds a new ACL payload

  Adds a new ACL payload.
*/
func (a *Client) AddPayloadRuntimeACL(params *AddPayloadRuntimeACLParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddPayloadRuntimeACLCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddPayloadRuntimeACLParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addPayloadRuntimeACL",
		Method:             "PUT",
		PathPattern:        "/services/haproxy/runtime/acl_file_entries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddPayloadRuntimeACLReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddPayloadRuntimeACLCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AddPayloadRuntimeACLDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
