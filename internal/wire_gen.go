// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package internal

import (
	"embed"
	"github.com/anantadwi13/cli-whm/internal/domain"
	"github.com/anantadwi13/cli-whm/internal/domain/service"
	"github.com/anantadwi13/cli-whm/internal/domain/usecase"
	service2 "github.com/anantadwi13/cli-whm/internal/external/service"
	usecase2 "github.com/anantadwi13/cli-whm/internal/external/usecase"
	"github.com/google/wire"
)

// Injectors from app.go:

func NewApp(config domain.Config) App {
	storage := service.NewStorage()
	registry := service2.NewLocalRegistry(config, storage)
	commander := service2.NewCommander()
	executor := service2.NewDockerExecutor(config, commander, registry, storage)
	fs := _wireFSValue
	proxy := service2.NewDockerProxy(config, executor)
	ucUp := usecase.NewUcUp(registry, executor, proxy)
	ucInit := usecase2.NewUcInit(registry, executor, config, storage, fs, ucUp, proxy)
	ucDown := usecase.NewUcDown(registry, executor)
	ucAdd := usecase2.NewUcAdd(config, registry, executor, proxy)
	ucRemove := usecase2.NewUcRemove(config, registry, executor, proxy)
	internalUseCases := useCases{
		Init:   ucInit,
		Up:     ucUp,
		Down:   ucDown,
		Add:    ucAdd,
		Remove: ucRemove,
	}
	app := App{
		UseCases: internalUseCases,
		Config:   config,
	}
	return app
}

var (
	_wireFSValue = Templates
)

// app.go:

var (
	//go:embed template/*
	Templates embed.FS
)

var useCasesSet = wire.NewSet(usecase2.NewUcInit, usecase.NewUcUp, usecase.NewUcDown, usecase2.NewUcAdd, usecase2.NewUcRemove, wire.Struct(new(useCases), "Init", "Up", "Down", "Add", "Remove"))

var serviceSet = wire.NewSet(service2.NewCommander, service2.NewLocalRegistry, service2.NewDockerExecutor, service.NewStorage, service2.NewDockerProxy, wire.Struct(new(services), "Commander", "Executor", "Registry", "Storage", "Proxy"))

var applicationSet = wire.NewSet(
	useCasesSet, wire.Value(Templates), wire.Struct(new(App), "UseCases", "Config"),
)

type useCases struct {
	Init   usecase.UcInit
	Up     usecase.UcUp
	Down   usecase.UcDown
	Add    usecase.UcAdd
	Remove usecase.UcRemove
}

type services struct {
	Commander service2.Commander
	Executor  service.Executor
	Registry  service.Registry
	Storage   service.Storage
	Proxy     service.Proxy
}

type App struct {
	UseCases useCases
	Config   domain.Config
}
