// Code generated by go-swagger; DO NOT EDIT.

package transactions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	models2 "github.com/anantadwi13/cli-whm/internal/homan/external/api/haproxy/models"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// CommitTransactionReader is a Reader for the CommitTransaction structure.
type CommitTransactionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CommitTransactionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCommitTransactionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 202:
		result := NewCommitTransactionAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCommitTransactionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCommitTransactionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 406:
		result := NewCommitTransactionNotAcceptable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewCommitTransactionDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCommitTransactionOK creates a CommitTransactionOK with default headers values
func NewCommitTransactionOK() *CommitTransactionOK {
	return &CommitTransactionOK{}
}

/* CommitTransactionOK describes a response with status code 200, with default header values.

Transaction successfully committed
*/
type CommitTransactionOK struct {
	Payload *models2.Transaction
}

func (o *CommitTransactionOK) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/transactions/{id}][%d] commitTransactionOK  %+v", 200, o.Payload)
}
func (o *CommitTransactionOK) GetPayload() *models2.Transaction {
	return o.Payload
}

func (o *CommitTransactionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models2.Transaction)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCommitTransactionAccepted creates a CommitTransactionAccepted with default headers values
func NewCommitTransactionAccepted() *CommitTransactionAccepted {
	return &CommitTransactionAccepted{}
}

/* CommitTransactionAccepted describes a response with status code 202, with default header values.

Configuration change accepted and reload requested
*/
type CommitTransactionAccepted struct {

	/* ID of the requested reload
	 */
	ReloadID string

	Payload *models2.Transaction
}

func (o *CommitTransactionAccepted) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/transactions/{id}][%d] commitTransactionAccepted  %+v", 202, o.Payload)
}
func (o *CommitTransactionAccepted) GetPayload() *models2.Transaction {
	return o.Payload
}

func (o *CommitTransactionAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Reload-ID
	hdrReloadID := response.GetHeader("Reload-ID")

	if hdrReloadID != "" {
		o.ReloadID = hdrReloadID
	}

	o.Payload = new(models2.Transaction)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCommitTransactionBadRequest creates a CommitTransactionBadRequest with default headers values
func NewCommitTransactionBadRequest() *CommitTransactionBadRequest {
	return &CommitTransactionBadRequest{}
}

/* CommitTransactionBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type CommitTransactionBadRequest struct {

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models2.Error
}

func (o *CommitTransactionBadRequest) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/transactions/{id}][%d] commitTransactionBadRequest  %+v", 400, o.Payload)
}
func (o *CommitTransactionBadRequest) GetPayload() *models2.Error {
	return o.Payload
}

func (o *CommitTransactionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models2.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCommitTransactionNotFound creates a CommitTransactionNotFound with default headers values
func NewCommitTransactionNotFound() *CommitTransactionNotFound {
	return &CommitTransactionNotFound{}
}

/* CommitTransactionNotFound describes a response with status code 404, with default header values.

The specified resource was not found
*/
type CommitTransactionNotFound struct {

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models2.Error
}

func (o *CommitTransactionNotFound) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/transactions/{id}][%d] commitTransactionNotFound  %+v", 404, o.Payload)
}
func (o *CommitTransactionNotFound) GetPayload() *models2.Error {
	return o.Payload
}

func (o *CommitTransactionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models2.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCommitTransactionNotAcceptable creates a CommitTransactionNotAcceptable with default headers values
func NewCommitTransactionNotAcceptable() *CommitTransactionNotAcceptable {
	return &CommitTransactionNotAcceptable{}
}

/* CommitTransactionNotAcceptable describes a response with status code 406, with default header values.

The specified resource cannot be handled
*/
type CommitTransactionNotAcceptable struct {

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models2.Error
}

func (o *CommitTransactionNotAcceptable) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/transactions/{id}][%d] commitTransactionNotAcceptable  %+v", 406, o.Payload)
}
func (o *CommitTransactionNotAcceptable) GetPayload() *models2.Error {
	return o.Payload
}

func (o *CommitTransactionNotAcceptable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models2.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCommitTransactionDefault creates a CommitTransactionDefault with default headers values
func NewCommitTransactionDefault(code int) *CommitTransactionDefault {
	return &CommitTransactionDefault{
		_statusCode: code,
	}
}

/* CommitTransactionDefault describes a response with status code -1, with default header values.

General Error
*/
type CommitTransactionDefault struct {
	_statusCode int

	/* Configuration file version
	 */
	ConfigurationVersion string

	Payload *models2.Error
}

// Code gets the status code for the commit transaction default response
func (o *CommitTransactionDefault) Code() int {
	return o._statusCode
}

func (o *CommitTransactionDefault) Error() string {
	return fmt.Sprintf("[PUT /services/haproxy/transactions/{id}][%d] commitTransaction default  %+v", o._statusCode, o.Payload)
}
func (o *CommitTransactionDefault) GetPayload() *models2.Error {
	return o.Payload
}

func (o *CommitTransactionDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Configuration-Version
	hdrConfigurationVersion := response.GetHeader("Configuration-Version")

	if hdrConfigurationVersion != "" {
		o.ConfigurationVersion = hdrConfigurationVersion
	}

	o.Payload = new(models2.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
