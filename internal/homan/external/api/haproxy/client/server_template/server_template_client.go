// Code generated by go-swagger; DO NOT EDIT.

package server_template

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new server template API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for server template API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateServerTemplate(params *CreateServerTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateServerTemplateCreated, *CreateServerTemplateAccepted, error)

	DeleteServerTemplate(params *DeleteServerTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteServerTemplateAccepted, *DeleteServerTemplateNoContent, error)

	GetServerTemplate(params *GetServerTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetServerTemplateOK, error)

	GetServerTemplates(params *GetServerTemplatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetServerTemplatesOK, error)

	ReplaceServerTemplate(params *ReplaceServerTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReplaceServerTemplateOK, *ReplaceServerTemplateAccepted, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateServerTemplate adds a new server template

  Adds a new server template in the specified backend in the configuration file.
*/
func (a *Client) CreateServerTemplate(params *CreateServerTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateServerTemplateCreated, *CreateServerTemplateAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateServerTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createServerTemplate",
		Method:             "POST",
		PathPattern:        "/services/haproxy/configuration/server_templates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateServerTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *CreateServerTemplateCreated:
		return value, nil, nil
	case *CreateServerTemplateAccepted:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateServerTemplateDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteServerTemplate deletes a server template

  Deletes a server template configuration by it's prefix in the specified backend.
*/
func (a *Client) DeleteServerTemplate(params *DeleteServerTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteServerTemplateAccepted, *DeleteServerTemplateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteServerTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteServerTemplate",
		Method:             "DELETE",
		PathPattern:        "/services/haproxy/configuration/server_templates/{prefix}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteServerTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteServerTemplateAccepted:
		return value, nil, nil
	case *DeleteServerTemplateNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteServerTemplateDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetServerTemplate returns one server template

  Returns one server template configuration by it's prefix in the specified backend.
*/
func (a *Client) GetServerTemplate(params *GetServerTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetServerTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServerTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getServerTemplate",
		Method:             "GET",
		PathPattern:        "/services/haproxy/configuration/server_templates/{prefix}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetServerTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServerTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetServerTemplateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetServerTemplates returns an array of server templates

  Returns an array of all server templates that are configured in specified backend.
*/
func (a *Client) GetServerTemplates(params *GetServerTemplatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetServerTemplatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServerTemplatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getServerTemplates",
		Method:             "GET",
		PathPattern:        "/services/haproxy/configuration/server_templates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetServerTemplatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServerTemplatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetServerTemplatesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ReplaceServerTemplate replaces a server template

  Replaces a server template configuration by it's prefix in the specified backend.
*/
func (a *Client) ReplaceServerTemplate(params *ReplaceServerTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReplaceServerTemplateOK, *ReplaceServerTemplateAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceServerTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "replaceServerTemplate",
		Method:             "PUT",
		PathPattern:        "/services/haproxy/configuration/server_templates/{prefix}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceServerTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceServerTemplateOK:
		return value, nil, nil
	case *ReplaceServerTemplateAccepted:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReplaceServerTemplateDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
