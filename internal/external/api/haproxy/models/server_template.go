// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServerTemplate Server template
//
// Set a template to initialize servers with shared parameters.
// Example: {"fqdn":"google.com","num_or_range":"1-3","port":80,"prefix":"srv"}
//
// swagger:model server_template
type ServerTemplate struct {

	// agent addr
	// Pattern: ^[^\s]+$
	AgentAddr string `json:"agent-addr,omitempty"`

	// agent check
	// Enum: [enabled disabled]
	AgentCheck string `json:"agent-check,omitempty"`

	// agent inter
	AgentInter *int64 `json:"agent-inter,omitempty"`

	// agent port
	// Maximum: 65535
	// Minimum: 1
	AgentPort *int64 `json:"agent-port,omitempty"`

	// agent send
	AgentSend string `json:"agent-send,omitempty"`

	// allow 0rtt
	Allow0rtt bool `json:"allow_0rtt,omitempty"`

	// alpn
	// Pattern: ^[^\s]+$
	Alpn string `json:"alpn,omitempty"`

	// backup
	// Enum: [enabled disabled]
	Backup string `json:"backup,omitempty"`

	// check
	// Enum: [enabled disabled]
	Check string `json:"check,omitempty"`

	// check send proxy
	// Enum: [enabled disabled]
	CheckSendProxy string `json:"check-send-proxy,omitempty"`

	// check sni
	// Pattern: ^[^\s]+$
	CheckSni string `json:"check-sni,omitempty"`

	// check ssl
	// Enum: [enabled disabled]
	CheckSsl string `json:"check-ssl,omitempty"`

	// check alpn
	// Pattern: ^[^\s]+$
	CheckAlpn string `json:"check_alpn,omitempty"`

	// check proto
	// Pattern: ^[^\s]+$
	CheckProto string `json:"check_proto,omitempty"`

	// check via socks4
	// Enum: [enabled disabled]
	CheckViaSocks4 string `json:"check_via_socks4,omitempty"`

	// ciphers
	Ciphers string `json:"ciphers,omitempty"`

	// ciphersuites
	Ciphersuites string `json:"ciphersuites,omitempty"`

	// cookie
	// Pattern: ^[^\s]+$
	Cookie string `json:"cookie,omitempty"`

	// crl file
	CrlFile string `json:"crl_file,omitempty"`

	// downinter
	Downinter *int64 `json:"downinter,omitempty"`

	// error limit
	ErrorLimit int64 `json:"error_limit,omitempty"`

	// fall
	Fall *int64 `json:"fall,omitempty"`

	// fastinter
	Fastinter *int64 `json:"fastinter,omitempty"`

	// force sslv3
	// Enum: [enabled disabled]
	ForceSslv3 string `json:"force_sslv3,omitempty"`

	// force tlsv10
	// Enum: [enabled disabled]
	ForceTlsv10 string `json:"force_tlsv10,omitempty"`

	// force tlsv11
	// Enum: [enabled disabled]
	ForceTlsv11 string `json:"force_tlsv11,omitempty"`

	// force tlsv12
	// Enum: [enabled disabled]
	ForceTlsv12 string `json:"force_tlsv12,omitempty"`

	// force tlsv13
	// Enum: [enabled disabled]
	ForceTlsv13 string `json:"force_tlsv13,omitempty"`

	// fqdn
	// Required: true
	Fqdn string `json:"fqdn"`

	// health check port
	// Maximum: 65535
	// Minimum: 1
	HealthCheckPort *int64 `json:"health_check_port,omitempty"`

	// id
	ID *int64 `json:"id,omitempty"`

	// init addr
	// Pattern: ^[^\s]+$
	InitAddr *string `json:"init-addr,omitempty"`

	// inter
	Inter *int64 `json:"inter,omitempty"`

	// log proto
	// Enum: [legacy octet-count]
	LogProto string `json:"log_proto,omitempty"`

	// maintenance
	// Enum: [enabled disabled]
	Maintenance string `json:"maintenance,omitempty"`

	// max reuse
	MaxReuse *int64 `json:"max_reuse,omitempty"`

	// maxconn
	Maxconn *int64 `json:"maxconn,omitempty"`

	// maxqueue
	Maxqueue *int64 `json:"maxqueue,omitempty"`

	// minconn
	Minconn *int64 `json:"minconn,omitempty"`

	// namespace
	Namespace string `json:"namespace,omitempty"`

	// no sslv3
	// Enum: [enabled disabled]
	NoSslv3 string `json:"no_sslv3,omitempty"`

	// no tlsv10
	// Enum: [enabled disabled]
	NoTlsv10 string `json:"no_tlsv10,omitempty"`

	// no tlsv11
	// Enum: [enabled disabled]
	NoTlsv11 string `json:"no_tlsv11,omitempty"`

	// no tlsv12
	// Enum: [enabled disabled]
	NoTlsv12 string `json:"no_tlsv12,omitempty"`

	// no tlsv13
	// Enum: [enabled disabled]
	NoTlsv13 string `json:"no_tlsv13,omitempty"`

	// no verifyhost
	// Enum: [enabled disabled]
	NoVerifyhost string `json:"no_verifyhost,omitempty"`

	// npn
	Npn string `json:"npn,omitempty"`

	// num or range
	// Required: true
	NumOrRange string `json:"num_or_range"`

	// observe
	// Enum: [layer4 layer7]
	Observe string `json:"observe,omitempty"`

	// on error
	// Enum: [fastinter fail-check sudden-death mark-down]
	OnError string `json:"on-error,omitempty"`

	// on marked down
	// Enum: [shutdown-sessions]
	OnMarkedDown string `json:"on-marked-down,omitempty"`

	// on marked up
	// Enum: [shutdown-backup-sessions]
	OnMarkedUp string `json:"on-marked-up,omitempty"`

	// pool low conn
	PoolLowConn *int64 `json:"pool_low_conn,omitempty"`

	// pool max conn
	PoolMaxConn *int64 `json:"pool_max_conn,omitempty"`

	// pool purge delay
	PoolPurgeDelay *int64 `json:"pool_purge_delay,omitempty"`

	// port
	// Maximum: 65535
	// Minimum: 1
	Port *int64 `json:"port,omitempty"`

	// prefix
	// Required: true
	// Pattern: ^[^\s]+$
	Prefix string `json:"prefix"`

	// proto
	// Pattern: ^[^\s]+$
	Proto string `json:"proto,omitempty"`

	// proxy v2 options
	ProxyV2Options []string `json:"proxy-v2-options"`

	// redir
	Redir string `json:"redir,omitempty"`

	// resolve net
	// Pattern: ^[^,\s][^\,]*[^,\s]*$
	ResolveNet string `json:"resolve-net,omitempty"`

	// resolve prefer
	// Enum: [ipv4 ipv6]
	ResolvePrefer string `json:"resolve-prefer,omitempty"`

	// resolve opts
	// Pattern: ^[^,\s][^\,]*[^,\s]*$
	ResolveOpts string `json:"resolve_opts,omitempty"`

	// resolvers
	// Pattern: ^[^\s]+$
	Resolvers string `json:"resolvers,omitempty"`

	// rise
	Rise *int64 `json:"rise,omitempty"`

	// send proxy
	// Enum: [enabled disabled]
	SendProxy string `json:"send-proxy,omitempty"`

	// send proxy v2
	// Enum: [enabled disabled]
	SendProxyV2 string `json:"send-proxy-v2,omitempty"`

	// send proxy v2 ssl
	// Enum: [enabled disabled]
	SendProxyV2Ssl string `json:"send_proxy_v2_ssl,omitempty"`

	// send proxy v2 ssl cn
	// Enum: [enabled disabled]
	SendProxyV2SslCn string `json:"send_proxy_v2_ssl_cn,omitempty"`

	// slowstart
	Slowstart *int64 `json:"slowstart,omitempty"`

	// sni
	// Pattern: ^[^\s]+$
	Sni string `json:"sni,omitempty"`

	// socks4
	// Pattern: ^[^\s]+$
	Socks4 string `json:"socks4,omitempty"`

	// source
	Source string `json:"source,omitempty"`

	// ssl
	// Enum: [enabled disabled]
	Ssl string `json:"ssl,omitempty"`

	// ssl cafile
	// Pattern: ^[^\s]+$
	SslCafile string `json:"ssl_cafile,omitempty"`

	// ssl certificate
	// Pattern: ^[^\s]+$
	SslCertificate string `json:"ssl_certificate,omitempty"`

	// ssl max ver
	// Enum: [SSLv3 TLSv1.0 TLSv1.1 TLSv1.2 TLSv1.3]
	SslMaxVer string `json:"ssl_max_ver,omitempty"`

	// ssl min ver
	// Enum: [SSLv3 TLSv1.0 TLSv1.1 TLSv1.2 TLSv1.3]
	SslMinVer string `json:"ssl_min_ver,omitempty"`

	// ssl reuse
	// Enum: [enabled disabled]
	SslReuse string `json:"ssl_reuse,omitempty"`

	// stick
	// Enum: [enabled disabled]
	Stick string `json:"stick,omitempty"`

	// tcp ut
	TCPUt int64 `json:"tcp_ut,omitempty"`

	// tfo
	// Enum: [enabled disabled]
	Tfo string `json:"tfo,omitempty"`

	// tls tickets
	// Enum: [enabled disabled]
	TLSTickets string `json:"tls_tickets,omitempty"`

	// track
	Track string `json:"track,omitempty"`

	// verify
	// Enum: [none required]
	Verify string `json:"verify,omitempty"`

	// verifyhost
	Verifyhost string `json:"verifyhost,omitempty"`

	// weight
	Weight *int64 `json:"weight,omitempty"`
}

// Validate validates this server template
func (m *ServerTemplate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgentAddr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAgentCheck(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAgentPort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAlpn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBackup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCheck(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCheckSendProxy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCheckSni(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCheckSsl(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCheckAlpn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCheckProto(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCheckViaSocks4(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCookie(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateForceSslv3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateForceTlsv10(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateForceTlsv11(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateForceTlsv12(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateForceTlsv13(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFqdn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHealthCheckPort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInitAddr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogProto(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaintenance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNoSslv3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNoTlsv10(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNoTlsv11(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNoTlsv12(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNoTlsv13(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNoVerifyhost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNumOrRange(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObserve(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOnError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOnMarkedDown(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOnMarkedUp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrefix(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProto(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProxyV2Options(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResolveNet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResolvePrefer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResolveOpts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResolvers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSendProxy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSendProxyV2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSendProxyV2Ssl(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSendProxyV2SslCn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSni(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSocks4(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSsl(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSslCafile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSslCertificate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSslMaxVer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSslMinVer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSslReuse(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStick(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTLSTickets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVerify(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServerTemplate) validateAgentAddr(formats strfmt.Registry) error {
	if swag.IsZero(m.AgentAddr) { // not required
		return nil
	}

	if err := validate.Pattern("agent-addr", "body", m.AgentAddr, `^[^\s]+$`); err != nil {
		return err
	}

	return nil
}

var serverTemplateTypeAgentCheckPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serverTemplateTypeAgentCheckPropEnum = append(serverTemplateTypeAgentCheckPropEnum, v)
	}
}

const (

	// ServerTemplateAgentCheckEnabled captures enum value "enabled"
	ServerTemplateAgentCheckEnabled string = "enabled"

	// ServerTemplateAgentCheckDisabled captures enum value "disabled"
	ServerTemplateAgentCheckDisabled string = "disabled"
)

// prop value enum
func (m *ServerTemplate) validateAgentCheckEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serverTemplateTypeAgentCheckPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServerTemplate) validateAgentCheck(formats strfmt.Registry) error {
	if swag.IsZero(m.AgentCheck) { // not required
		return nil
	}

	// value enum
	if err := m.validateAgentCheckEnum("agent-check", "body", m.AgentCheck); err != nil {
		return err
	}

	return nil
}

func (m *ServerTemplate) validateAgentPort(formats strfmt.Registry) error {
	if swag.IsZero(m.AgentPort) { // not required
		return nil
	}

	if err := validate.MinimumInt("agent-port", "body", *m.AgentPort, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("agent-port", "body", *m.AgentPort, 65535, false); err != nil {
		return err
	}

	return nil
}

func (m *ServerTemplate) validateAlpn(formats strfmt.Registry) error {
	if swag.IsZero(m.Alpn) { // not required
		return nil
	}

	if err := validate.Pattern("alpn", "body", m.Alpn, `^[^\s]+$`); err != nil {
		return err
	}

	return nil
}

var serverTemplateTypeBackupPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serverTemplateTypeBackupPropEnum = append(serverTemplateTypeBackupPropEnum, v)
	}
}

const (

	// ServerTemplateBackupEnabled captures enum value "enabled"
	ServerTemplateBackupEnabled string = "enabled"

	// ServerTemplateBackupDisabled captures enum value "disabled"
	ServerTemplateBackupDisabled string = "disabled"
)

// prop value enum
func (m *ServerTemplate) validateBackupEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serverTemplateTypeBackupPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServerTemplate) validateBackup(formats strfmt.Registry) error {
	if swag.IsZero(m.Backup) { // not required
		return nil
	}

	// value enum
	if err := m.validateBackupEnum("backup", "body", m.Backup); err != nil {
		return err
	}

	return nil
}

var serverTemplateTypeCheckPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serverTemplateTypeCheckPropEnum = append(serverTemplateTypeCheckPropEnum, v)
	}
}

const (

	// ServerTemplateCheckEnabled captures enum value "enabled"
	ServerTemplateCheckEnabled string = "enabled"

	// ServerTemplateCheckDisabled captures enum value "disabled"
	ServerTemplateCheckDisabled string = "disabled"
)

// prop value enum
func (m *ServerTemplate) validateCheckEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serverTemplateTypeCheckPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServerTemplate) validateCheck(formats strfmt.Registry) error {
	if swag.IsZero(m.Check) { // not required
		return nil
	}

	// value enum
	if err := m.validateCheckEnum("check", "body", m.Check); err != nil {
		return err
	}

	return nil
}

var serverTemplateTypeCheckSendProxyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serverTemplateTypeCheckSendProxyPropEnum = append(serverTemplateTypeCheckSendProxyPropEnum, v)
	}
}

const (

	// ServerTemplateCheckSendProxyEnabled captures enum value "enabled"
	ServerTemplateCheckSendProxyEnabled string = "enabled"

	// ServerTemplateCheckSendProxyDisabled captures enum value "disabled"
	ServerTemplateCheckSendProxyDisabled string = "disabled"
)

// prop value enum
func (m *ServerTemplate) validateCheckSendProxyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serverTemplateTypeCheckSendProxyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServerTemplate) validateCheckSendProxy(formats strfmt.Registry) error {
	if swag.IsZero(m.CheckSendProxy) { // not required
		return nil
	}

	// value enum
	if err := m.validateCheckSendProxyEnum("check-send-proxy", "body", m.CheckSendProxy); err != nil {
		return err
	}

	return nil
}

func (m *ServerTemplate) validateCheckSni(formats strfmt.Registry) error {
	if swag.IsZero(m.CheckSni) { // not required
		return nil
	}

	if err := validate.Pattern("check-sni", "body", m.CheckSni, `^[^\s]+$`); err != nil {
		return err
	}

	return nil
}

var serverTemplateTypeCheckSslPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serverTemplateTypeCheckSslPropEnum = append(serverTemplateTypeCheckSslPropEnum, v)
	}
}

const (

	// ServerTemplateCheckSslEnabled captures enum value "enabled"
	ServerTemplateCheckSslEnabled string = "enabled"

	// ServerTemplateCheckSslDisabled captures enum value "disabled"
	ServerTemplateCheckSslDisabled string = "disabled"
)

// prop value enum
func (m *ServerTemplate) validateCheckSslEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serverTemplateTypeCheckSslPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServerTemplate) validateCheckSsl(formats strfmt.Registry) error {
	if swag.IsZero(m.CheckSsl) { // not required
		return nil
	}

	// value enum
	if err := m.validateCheckSslEnum("check-ssl", "body", m.CheckSsl); err != nil {
		return err
	}

	return nil
}

func (m *ServerTemplate) validateCheckAlpn(formats strfmt.Registry) error {
	if swag.IsZero(m.CheckAlpn) { // not required
		return nil
	}

	if err := validate.Pattern("check_alpn", "body", m.CheckAlpn, `^[^\s]+$`); err != nil {
		return err
	}

	return nil
}

func (m *ServerTemplate) validateCheckProto(formats strfmt.Registry) error {
	if swag.IsZero(m.CheckProto) { // not required
		return nil
	}

	if err := validate.Pattern("check_proto", "body", m.CheckProto, `^[^\s]+$`); err != nil {
		return err
	}

	return nil
}

var serverTemplateTypeCheckViaSocks4PropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serverTemplateTypeCheckViaSocks4PropEnum = append(serverTemplateTypeCheckViaSocks4PropEnum, v)
	}
}

const (

	// ServerTemplateCheckViaSocks4Enabled captures enum value "enabled"
	ServerTemplateCheckViaSocks4Enabled string = "enabled"

	// ServerTemplateCheckViaSocks4Disabled captures enum value "disabled"
	ServerTemplateCheckViaSocks4Disabled string = "disabled"
)

// prop value enum
func (m *ServerTemplate) validateCheckViaSocks4Enum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serverTemplateTypeCheckViaSocks4PropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServerTemplate) validateCheckViaSocks4(formats strfmt.Registry) error {
	if swag.IsZero(m.CheckViaSocks4) { // not required
		return nil
	}

	// value enum
	if err := m.validateCheckViaSocks4Enum("check_via_socks4", "body", m.CheckViaSocks4); err != nil {
		return err
	}

	return nil
}

func (m *ServerTemplate) validateCookie(formats strfmt.Registry) error {
	if swag.IsZero(m.Cookie) { // not required
		return nil
	}

	if err := validate.Pattern("cookie", "body", m.Cookie, `^[^\s]+$`); err != nil {
		return err
	}

	return nil
}

var serverTemplateTypeForceSslv3PropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serverTemplateTypeForceSslv3PropEnum = append(serverTemplateTypeForceSslv3PropEnum, v)
	}
}

const (

	// ServerTemplateForceSslv3Enabled captures enum value "enabled"
	ServerTemplateForceSslv3Enabled string = "enabled"

	// ServerTemplateForceSslv3Disabled captures enum value "disabled"
	ServerTemplateForceSslv3Disabled string = "disabled"
)

// prop value enum
func (m *ServerTemplate) validateForceSslv3Enum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serverTemplateTypeForceSslv3PropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServerTemplate) validateForceSslv3(formats strfmt.Registry) error {
	if swag.IsZero(m.ForceSslv3) { // not required
		return nil
	}

	// value enum
	if err := m.validateForceSslv3Enum("force_sslv3", "body", m.ForceSslv3); err != nil {
		return err
	}

	return nil
}

var serverTemplateTypeForceTlsv10PropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serverTemplateTypeForceTlsv10PropEnum = append(serverTemplateTypeForceTlsv10PropEnum, v)
	}
}

const (

	// ServerTemplateForceTlsv10Enabled captures enum value "enabled"
	ServerTemplateForceTlsv10Enabled string = "enabled"

	// ServerTemplateForceTlsv10Disabled captures enum value "disabled"
	ServerTemplateForceTlsv10Disabled string = "disabled"
)

// prop value enum
func (m *ServerTemplate) validateForceTlsv10Enum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serverTemplateTypeForceTlsv10PropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServerTemplate) validateForceTlsv10(formats strfmt.Registry) error {
	if swag.IsZero(m.ForceTlsv10) { // not required
		return nil
	}

	// value enum
	if err := m.validateForceTlsv10Enum("force_tlsv10", "body", m.ForceTlsv10); err != nil {
		return err
	}

	return nil
}

var serverTemplateTypeForceTlsv11PropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serverTemplateTypeForceTlsv11PropEnum = append(serverTemplateTypeForceTlsv11PropEnum, v)
	}
}

const (

	// ServerTemplateForceTlsv11Enabled captures enum value "enabled"
	ServerTemplateForceTlsv11Enabled string = "enabled"

	// ServerTemplateForceTlsv11Disabled captures enum value "disabled"
	ServerTemplateForceTlsv11Disabled string = "disabled"
)

// prop value enum
func (m *ServerTemplate) validateForceTlsv11Enum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serverTemplateTypeForceTlsv11PropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServerTemplate) validateForceTlsv11(formats strfmt.Registry) error {
	if swag.IsZero(m.ForceTlsv11) { // not required
		return nil
	}

	// value enum
	if err := m.validateForceTlsv11Enum("force_tlsv11", "body", m.ForceTlsv11); err != nil {
		return err
	}

	return nil
}

var serverTemplateTypeForceTlsv12PropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serverTemplateTypeForceTlsv12PropEnum = append(serverTemplateTypeForceTlsv12PropEnum, v)
	}
}

const (

	// ServerTemplateForceTlsv12Enabled captures enum value "enabled"
	ServerTemplateForceTlsv12Enabled string = "enabled"

	// ServerTemplateForceTlsv12Disabled captures enum value "disabled"
	ServerTemplateForceTlsv12Disabled string = "disabled"
)

// prop value enum
func (m *ServerTemplate) validateForceTlsv12Enum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serverTemplateTypeForceTlsv12PropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServerTemplate) validateForceTlsv12(formats strfmt.Registry) error {
	if swag.IsZero(m.ForceTlsv12) { // not required
		return nil
	}

	// value enum
	if err := m.validateForceTlsv12Enum("force_tlsv12", "body", m.ForceTlsv12); err != nil {
		return err
	}

	return nil
}

var serverTemplateTypeForceTlsv13PropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serverTemplateTypeForceTlsv13PropEnum = append(serverTemplateTypeForceTlsv13PropEnum, v)
	}
}

const (

	// ServerTemplateForceTlsv13Enabled captures enum value "enabled"
	ServerTemplateForceTlsv13Enabled string = "enabled"

	// ServerTemplateForceTlsv13Disabled captures enum value "disabled"
	ServerTemplateForceTlsv13Disabled string = "disabled"
)

// prop value enum
func (m *ServerTemplate) validateForceTlsv13Enum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serverTemplateTypeForceTlsv13PropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServerTemplate) validateForceTlsv13(formats strfmt.Registry) error {
	if swag.IsZero(m.ForceTlsv13) { // not required
		return nil
	}

	// value enum
	if err := m.validateForceTlsv13Enum("force_tlsv13", "body", m.ForceTlsv13); err != nil {
		return err
	}

	return nil
}

func (m *ServerTemplate) validateFqdn(formats strfmt.Registry) error {

	if err := validate.RequiredString("fqdn", "body", m.Fqdn); err != nil {
		return err
	}

	return nil
}

func (m *ServerTemplate) validateHealthCheckPort(formats strfmt.Registry) error {
	if swag.IsZero(m.HealthCheckPort) { // not required
		return nil
	}

	if err := validate.MinimumInt("health_check_port", "body", *m.HealthCheckPort, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("health_check_port", "body", *m.HealthCheckPort, 65535, false); err != nil {
		return err
	}

	return nil
}

func (m *ServerTemplate) validateInitAddr(formats strfmt.Registry) error {
	if swag.IsZero(m.InitAddr) { // not required
		return nil
	}

	if err := validate.Pattern("init-addr", "body", *m.InitAddr, `^[^\s]+$`); err != nil {
		return err
	}

	return nil
}

var serverTemplateTypeLogProtoPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["legacy","octet-count"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serverTemplateTypeLogProtoPropEnum = append(serverTemplateTypeLogProtoPropEnum, v)
	}
}

const (

	// ServerTemplateLogProtoLegacy captures enum value "legacy"
	ServerTemplateLogProtoLegacy string = "legacy"

	// ServerTemplateLogProtoOctetDashCount captures enum value "octet-count"
	ServerTemplateLogProtoOctetDashCount string = "octet-count"
)

// prop value enum
func (m *ServerTemplate) validateLogProtoEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serverTemplateTypeLogProtoPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServerTemplate) validateLogProto(formats strfmt.Registry) error {
	if swag.IsZero(m.LogProto) { // not required
		return nil
	}

	// value enum
	if err := m.validateLogProtoEnum("log_proto", "body", m.LogProto); err != nil {
		return err
	}

	return nil
}

var serverTemplateTypeMaintenancePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serverTemplateTypeMaintenancePropEnum = append(serverTemplateTypeMaintenancePropEnum, v)
	}
}

const (

	// ServerTemplateMaintenanceEnabled captures enum value "enabled"
	ServerTemplateMaintenanceEnabled string = "enabled"

	// ServerTemplateMaintenanceDisabled captures enum value "disabled"
	ServerTemplateMaintenanceDisabled string = "disabled"
)

// prop value enum
func (m *ServerTemplate) validateMaintenanceEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serverTemplateTypeMaintenancePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServerTemplate) validateMaintenance(formats strfmt.Registry) error {
	if swag.IsZero(m.Maintenance) { // not required
		return nil
	}

	// value enum
	if err := m.validateMaintenanceEnum("maintenance", "body", m.Maintenance); err != nil {
		return err
	}

	return nil
}

var serverTemplateTypeNoSslv3PropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serverTemplateTypeNoSslv3PropEnum = append(serverTemplateTypeNoSslv3PropEnum, v)
	}
}

const (

	// ServerTemplateNoSslv3Enabled captures enum value "enabled"
	ServerTemplateNoSslv3Enabled string = "enabled"

	// ServerTemplateNoSslv3Disabled captures enum value "disabled"
	ServerTemplateNoSslv3Disabled string = "disabled"
)

// prop value enum
func (m *ServerTemplate) validateNoSslv3Enum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serverTemplateTypeNoSslv3PropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServerTemplate) validateNoSslv3(formats strfmt.Registry) error {
	if swag.IsZero(m.NoSslv3) { // not required
		return nil
	}

	// value enum
	if err := m.validateNoSslv3Enum("no_sslv3", "body", m.NoSslv3); err != nil {
		return err
	}

	return nil
}

var serverTemplateTypeNoTlsv10PropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serverTemplateTypeNoTlsv10PropEnum = append(serverTemplateTypeNoTlsv10PropEnum, v)
	}
}

const (

	// ServerTemplateNoTlsv10Enabled captures enum value "enabled"
	ServerTemplateNoTlsv10Enabled string = "enabled"

	// ServerTemplateNoTlsv10Disabled captures enum value "disabled"
	ServerTemplateNoTlsv10Disabled string = "disabled"
)

// prop value enum
func (m *ServerTemplate) validateNoTlsv10Enum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serverTemplateTypeNoTlsv10PropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServerTemplate) validateNoTlsv10(formats strfmt.Registry) error {
	if swag.IsZero(m.NoTlsv10) { // not required
		return nil
	}

	// value enum
	if err := m.validateNoTlsv10Enum("no_tlsv10", "body", m.NoTlsv10); err != nil {
		return err
	}

	return nil
}

var serverTemplateTypeNoTlsv11PropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serverTemplateTypeNoTlsv11PropEnum = append(serverTemplateTypeNoTlsv11PropEnum, v)
	}
}

const (

	// ServerTemplateNoTlsv11Enabled captures enum value "enabled"
	ServerTemplateNoTlsv11Enabled string = "enabled"

	// ServerTemplateNoTlsv11Disabled captures enum value "disabled"
	ServerTemplateNoTlsv11Disabled string = "disabled"
)

// prop value enum
func (m *ServerTemplate) validateNoTlsv11Enum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serverTemplateTypeNoTlsv11PropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServerTemplate) validateNoTlsv11(formats strfmt.Registry) error {
	if swag.IsZero(m.NoTlsv11) { // not required
		return nil
	}

	// value enum
	if err := m.validateNoTlsv11Enum("no_tlsv11", "body", m.NoTlsv11); err != nil {
		return err
	}

	return nil
}

var serverTemplateTypeNoTlsv12PropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serverTemplateTypeNoTlsv12PropEnum = append(serverTemplateTypeNoTlsv12PropEnum, v)
	}
}

const (

	// ServerTemplateNoTlsv12Enabled captures enum value "enabled"
	ServerTemplateNoTlsv12Enabled string = "enabled"

	// ServerTemplateNoTlsv12Disabled captures enum value "disabled"
	ServerTemplateNoTlsv12Disabled string = "disabled"
)

// prop value enum
func (m *ServerTemplate) validateNoTlsv12Enum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serverTemplateTypeNoTlsv12PropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServerTemplate) validateNoTlsv12(formats strfmt.Registry) error {
	if swag.IsZero(m.NoTlsv12) { // not required
		return nil
	}

	// value enum
	if err := m.validateNoTlsv12Enum("no_tlsv12", "body", m.NoTlsv12); err != nil {
		return err
	}

	return nil
}

var serverTemplateTypeNoTlsv13PropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serverTemplateTypeNoTlsv13PropEnum = append(serverTemplateTypeNoTlsv13PropEnum, v)
	}
}

const (

	// ServerTemplateNoTlsv13Enabled captures enum value "enabled"
	ServerTemplateNoTlsv13Enabled string = "enabled"

	// ServerTemplateNoTlsv13Disabled captures enum value "disabled"
	ServerTemplateNoTlsv13Disabled string = "disabled"
)

// prop value enum
func (m *ServerTemplate) validateNoTlsv13Enum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serverTemplateTypeNoTlsv13PropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServerTemplate) validateNoTlsv13(formats strfmt.Registry) error {
	if swag.IsZero(m.NoTlsv13) { // not required
		return nil
	}

	// value enum
	if err := m.validateNoTlsv13Enum("no_tlsv13", "body", m.NoTlsv13); err != nil {
		return err
	}

	return nil
}

var serverTemplateTypeNoVerifyhostPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serverTemplateTypeNoVerifyhostPropEnum = append(serverTemplateTypeNoVerifyhostPropEnum, v)
	}
}

const (

	// ServerTemplateNoVerifyhostEnabled captures enum value "enabled"
	ServerTemplateNoVerifyhostEnabled string = "enabled"

	// ServerTemplateNoVerifyhostDisabled captures enum value "disabled"
	ServerTemplateNoVerifyhostDisabled string = "disabled"
)

// prop value enum
func (m *ServerTemplate) validateNoVerifyhostEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serverTemplateTypeNoVerifyhostPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServerTemplate) validateNoVerifyhost(formats strfmt.Registry) error {
	if swag.IsZero(m.NoVerifyhost) { // not required
		return nil
	}

	// value enum
	if err := m.validateNoVerifyhostEnum("no_verifyhost", "body", m.NoVerifyhost); err != nil {
		return err
	}

	return nil
}

func (m *ServerTemplate) validateNumOrRange(formats strfmt.Registry) error {

	if err := validate.RequiredString("num_or_range", "body", m.NumOrRange); err != nil {
		return err
	}

	return nil
}

var serverTemplateTypeObservePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["layer4","layer7"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serverTemplateTypeObservePropEnum = append(serverTemplateTypeObservePropEnum, v)
	}
}

const (

	// ServerTemplateObserveLayer4 captures enum value "layer4"
	ServerTemplateObserveLayer4 string = "layer4"

	// ServerTemplateObserveLayer7 captures enum value "layer7"
	ServerTemplateObserveLayer7 string = "layer7"
)

// prop value enum
func (m *ServerTemplate) validateObserveEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serverTemplateTypeObservePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServerTemplate) validateObserve(formats strfmt.Registry) error {
	if swag.IsZero(m.Observe) { // not required
		return nil
	}

	// value enum
	if err := m.validateObserveEnum("observe", "body", m.Observe); err != nil {
		return err
	}

	return nil
}

var serverTemplateTypeOnErrorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["fastinter","fail-check","sudden-death","mark-down"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serverTemplateTypeOnErrorPropEnum = append(serverTemplateTypeOnErrorPropEnum, v)
	}
}

const (

	// ServerTemplateOnErrorFastinter captures enum value "fastinter"
	ServerTemplateOnErrorFastinter string = "fastinter"

	// ServerTemplateOnErrorFailDashCheck captures enum value "fail-check"
	ServerTemplateOnErrorFailDashCheck string = "fail-check"

	// ServerTemplateOnErrorSuddenDashDeath captures enum value "sudden-death"
	ServerTemplateOnErrorSuddenDashDeath string = "sudden-death"

	// ServerTemplateOnErrorMarkDashDown captures enum value "mark-down"
	ServerTemplateOnErrorMarkDashDown string = "mark-down"
)

// prop value enum
func (m *ServerTemplate) validateOnErrorEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serverTemplateTypeOnErrorPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServerTemplate) validateOnError(formats strfmt.Registry) error {
	if swag.IsZero(m.OnError) { // not required
		return nil
	}

	// value enum
	if err := m.validateOnErrorEnum("on-error", "body", m.OnError); err != nil {
		return err
	}

	return nil
}

var serverTemplateTypeOnMarkedDownPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["shutdown-sessions"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serverTemplateTypeOnMarkedDownPropEnum = append(serverTemplateTypeOnMarkedDownPropEnum, v)
	}
}

const (

	// ServerTemplateOnMarkedDownShutdownDashSessions captures enum value "shutdown-sessions"
	ServerTemplateOnMarkedDownShutdownDashSessions string = "shutdown-sessions"
)

// prop value enum
func (m *ServerTemplate) validateOnMarkedDownEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serverTemplateTypeOnMarkedDownPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServerTemplate) validateOnMarkedDown(formats strfmt.Registry) error {
	if swag.IsZero(m.OnMarkedDown) { // not required
		return nil
	}

	// value enum
	if err := m.validateOnMarkedDownEnum("on-marked-down", "body", m.OnMarkedDown); err != nil {
		return err
	}

	return nil
}

var serverTemplateTypeOnMarkedUpPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["shutdown-backup-sessions"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serverTemplateTypeOnMarkedUpPropEnum = append(serverTemplateTypeOnMarkedUpPropEnum, v)
	}
}

const (

	// ServerTemplateOnMarkedUpShutdownDashBackupDashSessions captures enum value "shutdown-backup-sessions"
	ServerTemplateOnMarkedUpShutdownDashBackupDashSessions string = "shutdown-backup-sessions"
)

// prop value enum
func (m *ServerTemplate) validateOnMarkedUpEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serverTemplateTypeOnMarkedUpPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServerTemplate) validateOnMarkedUp(formats strfmt.Registry) error {
	if swag.IsZero(m.OnMarkedUp) { // not required
		return nil
	}

	// value enum
	if err := m.validateOnMarkedUpEnum("on-marked-up", "body", m.OnMarkedUp); err != nil {
		return err
	}

	return nil
}

func (m *ServerTemplate) validatePort(formats strfmt.Registry) error {
	if swag.IsZero(m.Port) { // not required
		return nil
	}

	if err := validate.MinimumInt("port", "body", *m.Port, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("port", "body", *m.Port, 65535, false); err != nil {
		return err
	}

	return nil
}

func (m *ServerTemplate) validatePrefix(formats strfmt.Registry) error {

	if err := validate.RequiredString("prefix", "body", m.Prefix); err != nil {
		return err
	}

	if err := validate.Pattern("prefix", "body", m.Prefix, `^[^\s]+$`); err != nil {
		return err
	}

	return nil
}

func (m *ServerTemplate) validateProto(formats strfmt.Registry) error {
	if swag.IsZero(m.Proto) { // not required
		return nil
	}

	if err := validate.Pattern("proto", "body", m.Proto, `^[^\s]+$`); err != nil {
		return err
	}

	return nil
}

var serverTemplateProxyV2OptionsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ssl","cert-cn","ssl-cipher","cert-sig","cert-key","authority","crc32c","unique-id"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serverTemplateProxyV2OptionsItemsEnum = append(serverTemplateProxyV2OptionsItemsEnum, v)
	}
}

func (m *ServerTemplate) validateProxyV2OptionsItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serverTemplateProxyV2OptionsItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServerTemplate) validateProxyV2Options(formats strfmt.Registry) error {
	if swag.IsZero(m.ProxyV2Options) { // not required
		return nil
	}

	for i := 0; i < len(m.ProxyV2Options); i++ {

		// value enum
		if err := m.validateProxyV2OptionsItemsEnum("proxy-v2-options"+"."+strconv.Itoa(i), "body", m.ProxyV2Options[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *ServerTemplate) validateResolveNet(formats strfmt.Registry) error {
	if swag.IsZero(m.ResolveNet) { // not required
		return nil
	}

	if err := validate.Pattern("resolve-net", "body", m.ResolveNet, `^[^,\s][^\,]*[^,\s]*$`); err != nil {
		return err
	}

	return nil
}

var serverTemplateTypeResolvePreferPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ipv4","ipv6"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serverTemplateTypeResolvePreferPropEnum = append(serverTemplateTypeResolvePreferPropEnum, v)
	}
}

const (

	// ServerTemplateResolvePreferIPV4 captures enum value "ipv4"
	ServerTemplateResolvePreferIPV4 string = "ipv4"

	// ServerTemplateResolvePreferIPV6 captures enum value "ipv6"
	ServerTemplateResolvePreferIPV6 string = "ipv6"
)

// prop value enum
func (m *ServerTemplate) validateResolvePreferEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serverTemplateTypeResolvePreferPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServerTemplate) validateResolvePrefer(formats strfmt.Registry) error {
	if swag.IsZero(m.ResolvePrefer) { // not required
		return nil
	}

	// value enum
	if err := m.validateResolvePreferEnum("resolve-prefer", "body", m.ResolvePrefer); err != nil {
		return err
	}

	return nil
}

func (m *ServerTemplate) validateResolveOpts(formats strfmt.Registry) error {
	if swag.IsZero(m.ResolveOpts) { // not required
		return nil
	}

	if err := validate.Pattern("resolve_opts", "body", m.ResolveOpts, `^[^,\s][^\,]*[^,\s]*$`); err != nil {
		return err
	}

	return nil
}

func (m *ServerTemplate) validateResolvers(formats strfmt.Registry) error {
	if swag.IsZero(m.Resolvers) { // not required
		return nil
	}

	if err := validate.Pattern("resolvers", "body", m.Resolvers, `^[^\s]+$`); err != nil {
		return err
	}

	return nil
}

var serverTemplateTypeSendProxyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serverTemplateTypeSendProxyPropEnum = append(serverTemplateTypeSendProxyPropEnum, v)
	}
}

const (

	// ServerTemplateSendProxyEnabled captures enum value "enabled"
	ServerTemplateSendProxyEnabled string = "enabled"

	// ServerTemplateSendProxyDisabled captures enum value "disabled"
	ServerTemplateSendProxyDisabled string = "disabled"
)

// prop value enum
func (m *ServerTemplate) validateSendProxyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serverTemplateTypeSendProxyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServerTemplate) validateSendProxy(formats strfmt.Registry) error {
	if swag.IsZero(m.SendProxy) { // not required
		return nil
	}

	// value enum
	if err := m.validateSendProxyEnum("send-proxy", "body", m.SendProxy); err != nil {
		return err
	}

	return nil
}

var serverTemplateTypeSendProxyV2PropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serverTemplateTypeSendProxyV2PropEnum = append(serverTemplateTypeSendProxyV2PropEnum, v)
	}
}

const (

	// ServerTemplateSendProxyV2Enabled captures enum value "enabled"
	ServerTemplateSendProxyV2Enabled string = "enabled"

	// ServerTemplateSendProxyV2Disabled captures enum value "disabled"
	ServerTemplateSendProxyV2Disabled string = "disabled"
)

// prop value enum
func (m *ServerTemplate) validateSendProxyV2Enum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serverTemplateTypeSendProxyV2PropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServerTemplate) validateSendProxyV2(formats strfmt.Registry) error {
	if swag.IsZero(m.SendProxyV2) { // not required
		return nil
	}

	// value enum
	if err := m.validateSendProxyV2Enum("send-proxy-v2", "body", m.SendProxyV2); err != nil {
		return err
	}

	return nil
}

var serverTemplateTypeSendProxyV2SslPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serverTemplateTypeSendProxyV2SslPropEnum = append(serverTemplateTypeSendProxyV2SslPropEnum, v)
	}
}

const (

	// ServerTemplateSendProxyV2SslEnabled captures enum value "enabled"
	ServerTemplateSendProxyV2SslEnabled string = "enabled"

	// ServerTemplateSendProxyV2SslDisabled captures enum value "disabled"
	ServerTemplateSendProxyV2SslDisabled string = "disabled"
)

// prop value enum
func (m *ServerTemplate) validateSendProxyV2SslEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serverTemplateTypeSendProxyV2SslPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServerTemplate) validateSendProxyV2Ssl(formats strfmt.Registry) error {
	if swag.IsZero(m.SendProxyV2Ssl) { // not required
		return nil
	}

	// value enum
	if err := m.validateSendProxyV2SslEnum("send_proxy_v2_ssl", "body", m.SendProxyV2Ssl); err != nil {
		return err
	}

	return nil
}

var serverTemplateTypeSendProxyV2SslCnPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serverTemplateTypeSendProxyV2SslCnPropEnum = append(serverTemplateTypeSendProxyV2SslCnPropEnum, v)
	}
}

const (

	// ServerTemplateSendProxyV2SslCnEnabled captures enum value "enabled"
	ServerTemplateSendProxyV2SslCnEnabled string = "enabled"

	// ServerTemplateSendProxyV2SslCnDisabled captures enum value "disabled"
	ServerTemplateSendProxyV2SslCnDisabled string = "disabled"
)

// prop value enum
func (m *ServerTemplate) validateSendProxyV2SslCnEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serverTemplateTypeSendProxyV2SslCnPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServerTemplate) validateSendProxyV2SslCn(formats strfmt.Registry) error {
	if swag.IsZero(m.SendProxyV2SslCn) { // not required
		return nil
	}

	// value enum
	if err := m.validateSendProxyV2SslCnEnum("send_proxy_v2_ssl_cn", "body", m.SendProxyV2SslCn); err != nil {
		return err
	}

	return nil
}

func (m *ServerTemplate) validateSni(formats strfmt.Registry) error {
	if swag.IsZero(m.Sni) { // not required
		return nil
	}

	if err := validate.Pattern("sni", "body", m.Sni, `^[^\s]+$`); err != nil {
		return err
	}

	return nil
}

func (m *ServerTemplate) validateSocks4(formats strfmt.Registry) error {
	if swag.IsZero(m.Socks4) { // not required
		return nil
	}

	if err := validate.Pattern("socks4", "body", m.Socks4, `^[^\s]+$`); err != nil {
		return err
	}

	return nil
}

var serverTemplateTypeSslPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serverTemplateTypeSslPropEnum = append(serverTemplateTypeSslPropEnum, v)
	}
}

const (

	// ServerTemplateSslEnabled captures enum value "enabled"
	ServerTemplateSslEnabled string = "enabled"

	// ServerTemplateSslDisabled captures enum value "disabled"
	ServerTemplateSslDisabled string = "disabled"
)

// prop value enum
func (m *ServerTemplate) validateSslEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serverTemplateTypeSslPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServerTemplate) validateSsl(formats strfmt.Registry) error {
	if swag.IsZero(m.Ssl) { // not required
		return nil
	}

	// value enum
	if err := m.validateSslEnum("ssl", "body", m.Ssl); err != nil {
		return err
	}

	return nil
}

func (m *ServerTemplate) validateSslCafile(formats strfmt.Registry) error {
	if swag.IsZero(m.SslCafile) { // not required
		return nil
	}

	if err := validate.Pattern("ssl_cafile", "body", m.SslCafile, `^[^\s]+$`); err != nil {
		return err
	}

	return nil
}

func (m *ServerTemplate) validateSslCertificate(formats strfmt.Registry) error {
	if swag.IsZero(m.SslCertificate) { // not required
		return nil
	}

	if err := validate.Pattern("ssl_certificate", "body", m.SslCertificate, `^[^\s]+$`); err != nil {
		return err
	}

	return nil
}

var serverTemplateTypeSslMaxVerPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SSLv3","TLSv1.0","TLSv1.1","TLSv1.2","TLSv1.3"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serverTemplateTypeSslMaxVerPropEnum = append(serverTemplateTypeSslMaxVerPropEnum, v)
	}
}

const (

	// ServerTemplateSslMaxVerSSLv3 captures enum value "SSLv3"
	ServerTemplateSslMaxVerSSLv3 string = "SSLv3"

	// ServerTemplateSslMaxVerTLSv1Dot0 captures enum value "TLSv1.0"
	ServerTemplateSslMaxVerTLSv1Dot0 string = "TLSv1.0"

	// ServerTemplateSslMaxVerTLSv1Dot1 captures enum value "TLSv1.1"
	ServerTemplateSslMaxVerTLSv1Dot1 string = "TLSv1.1"

	// ServerTemplateSslMaxVerTLSv1Dot2 captures enum value "TLSv1.2"
	ServerTemplateSslMaxVerTLSv1Dot2 string = "TLSv1.2"

	// ServerTemplateSslMaxVerTLSv1Dot3 captures enum value "TLSv1.3"
	ServerTemplateSslMaxVerTLSv1Dot3 string = "TLSv1.3"
)

// prop value enum
func (m *ServerTemplate) validateSslMaxVerEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serverTemplateTypeSslMaxVerPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServerTemplate) validateSslMaxVer(formats strfmt.Registry) error {
	if swag.IsZero(m.SslMaxVer) { // not required
		return nil
	}

	// value enum
	if err := m.validateSslMaxVerEnum("ssl_max_ver", "body", m.SslMaxVer); err != nil {
		return err
	}

	return nil
}

var serverTemplateTypeSslMinVerPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SSLv3","TLSv1.0","TLSv1.1","TLSv1.2","TLSv1.3"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serverTemplateTypeSslMinVerPropEnum = append(serverTemplateTypeSslMinVerPropEnum, v)
	}
}

const (

	// ServerTemplateSslMinVerSSLv3 captures enum value "SSLv3"
	ServerTemplateSslMinVerSSLv3 string = "SSLv3"

	// ServerTemplateSslMinVerTLSv1Dot0 captures enum value "TLSv1.0"
	ServerTemplateSslMinVerTLSv1Dot0 string = "TLSv1.0"

	// ServerTemplateSslMinVerTLSv1Dot1 captures enum value "TLSv1.1"
	ServerTemplateSslMinVerTLSv1Dot1 string = "TLSv1.1"

	// ServerTemplateSslMinVerTLSv1Dot2 captures enum value "TLSv1.2"
	ServerTemplateSslMinVerTLSv1Dot2 string = "TLSv1.2"

	// ServerTemplateSslMinVerTLSv1Dot3 captures enum value "TLSv1.3"
	ServerTemplateSslMinVerTLSv1Dot3 string = "TLSv1.3"
)

// prop value enum
func (m *ServerTemplate) validateSslMinVerEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serverTemplateTypeSslMinVerPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServerTemplate) validateSslMinVer(formats strfmt.Registry) error {
	if swag.IsZero(m.SslMinVer) { // not required
		return nil
	}

	// value enum
	if err := m.validateSslMinVerEnum("ssl_min_ver", "body", m.SslMinVer); err != nil {
		return err
	}

	return nil
}

var serverTemplateTypeSslReusePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serverTemplateTypeSslReusePropEnum = append(serverTemplateTypeSslReusePropEnum, v)
	}
}

const (

	// ServerTemplateSslReuseEnabled captures enum value "enabled"
	ServerTemplateSslReuseEnabled string = "enabled"

	// ServerTemplateSslReuseDisabled captures enum value "disabled"
	ServerTemplateSslReuseDisabled string = "disabled"
)

// prop value enum
func (m *ServerTemplate) validateSslReuseEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serverTemplateTypeSslReusePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServerTemplate) validateSslReuse(formats strfmt.Registry) error {
	if swag.IsZero(m.SslReuse) { // not required
		return nil
	}

	// value enum
	if err := m.validateSslReuseEnum("ssl_reuse", "body", m.SslReuse); err != nil {
		return err
	}

	return nil
}

var serverTemplateTypeStickPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serverTemplateTypeStickPropEnum = append(serverTemplateTypeStickPropEnum, v)
	}
}

const (

	// ServerTemplateStickEnabled captures enum value "enabled"
	ServerTemplateStickEnabled string = "enabled"

	// ServerTemplateStickDisabled captures enum value "disabled"
	ServerTemplateStickDisabled string = "disabled"
)

// prop value enum
func (m *ServerTemplate) validateStickEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serverTemplateTypeStickPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServerTemplate) validateStick(formats strfmt.Registry) error {
	if swag.IsZero(m.Stick) { // not required
		return nil
	}

	// value enum
	if err := m.validateStickEnum("stick", "body", m.Stick); err != nil {
		return err
	}

	return nil
}

var serverTemplateTypeTfoPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serverTemplateTypeTfoPropEnum = append(serverTemplateTypeTfoPropEnum, v)
	}
}

const (

	// ServerTemplateTfoEnabled captures enum value "enabled"
	ServerTemplateTfoEnabled string = "enabled"

	// ServerTemplateTfoDisabled captures enum value "disabled"
	ServerTemplateTfoDisabled string = "disabled"
)

// prop value enum
func (m *ServerTemplate) validateTfoEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serverTemplateTypeTfoPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServerTemplate) validateTfo(formats strfmt.Registry) error {
	if swag.IsZero(m.Tfo) { // not required
		return nil
	}

	// value enum
	if err := m.validateTfoEnum("tfo", "body", m.Tfo); err != nil {
		return err
	}

	return nil
}

var serverTemplateTypeTLSTicketsPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["enabled","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serverTemplateTypeTLSTicketsPropEnum = append(serverTemplateTypeTLSTicketsPropEnum, v)
	}
}

const (

	// ServerTemplateTLSTicketsEnabled captures enum value "enabled"
	ServerTemplateTLSTicketsEnabled string = "enabled"

	// ServerTemplateTLSTicketsDisabled captures enum value "disabled"
	ServerTemplateTLSTicketsDisabled string = "disabled"
)

// prop value enum
func (m *ServerTemplate) validateTLSTicketsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serverTemplateTypeTLSTicketsPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServerTemplate) validateTLSTickets(formats strfmt.Registry) error {
	if swag.IsZero(m.TLSTickets) { // not required
		return nil
	}

	// value enum
	if err := m.validateTLSTicketsEnum("tls_tickets", "body", m.TLSTickets); err != nil {
		return err
	}

	return nil
}

var serverTemplateTypeVerifyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["none","required"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serverTemplateTypeVerifyPropEnum = append(serverTemplateTypeVerifyPropEnum, v)
	}
}

const (

	// ServerTemplateVerifyNone captures enum value "none"
	ServerTemplateVerifyNone string = "none"

	// ServerTemplateVerifyRequired captures enum value "required"
	ServerTemplateVerifyRequired string = "required"
)

// prop value enum
func (m *ServerTemplate) validateVerifyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serverTemplateTypeVerifyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServerTemplate) validateVerify(formats strfmt.Registry) error {
	if swag.IsZero(m.Verify) { // not required
		return nil
	}

	// value enum
	if err := m.validateVerifyEnum("verify", "body", m.Verify); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this server template based on context it is used
func (m *ServerTemplate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ServerTemplate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServerTemplate) UnmarshalBinary(b []byte) error {
	var res ServerTemplate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
