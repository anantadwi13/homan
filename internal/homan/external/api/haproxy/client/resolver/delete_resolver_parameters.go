// Code generated by go-swagger; DO NOT EDIT.

package resolver

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDeleteResolverParams creates a new DeleteResolverParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDeleteResolverParams() *DeleteResolverParams {
	return &DeleteResolverParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteResolverParamsWithTimeout creates a new DeleteResolverParams object
// with the ability to set a timeout on a request.
func NewDeleteResolverParamsWithTimeout(timeout time.Duration) *DeleteResolverParams {
	return &DeleteResolverParams{
		timeout: timeout,
	}
}

// NewDeleteResolverParamsWithContext creates a new DeleteResolverParams object
// with the ability to set a context for a request.
func NewDeleteResolverParamsWithContext(ctx context.Context) *DeleteResolverParams {
	return &DeleteResolverParams{
		Context: ctx,
	}
}

// NewDeleteResolverParamsWithHTTPClient creates a new DeleteResolverParams object
// with the ability to set a custom HTTPClient for a request.
func NewDeleteResolverParamsWithHTTPClient(client *http.Client) *DeleteResolverParams {
	return &DeleteResolverParams{
		HTTPClient: client,
	}
}

/* DeleteResolverParams contains all the parameters to send to the API endpoint
   for the delete resolver operation.

   Typically these are written to a http.Request.
*/
type DeleteResolverParams struct {

	/* ForceReload.

	   If set, do a force reload, do not wait for the configured reload-delay. Cannot be used when transaction is specified, as changes in transaction are not applied directly to configuration.
	*/
	ForceReload *bool

	/* Name.

	   Resolver name
	*/
	Name string

	/* TransactionID.

	   ID of the transaction where we want to add the operation. Cannot be used when version is specified.
	*/
	TransactionID *string

	/* Version.

	   Version used for checking configuration version. Cannot be used when transaction is specified, transaction has it's own version.
	*/
	Version *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the delete resolver params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteResolverParams) WithDefaults() *DeleteResolverParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the delete resolver params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteResolverParams) SetDefaults() {
	var (
		forceReloadDefault = bool(false)
	)

	val := DeleteResolverParams{
		ForceReload: &forceReloadDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the delete resolver params
func (o *DeleteResolverParams) WithTimeout(timeout time.Duration) *DeleteResolverParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete resolver params
func (o *DeleteResolverParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete resolver params
func (o *DeleteResolverParams) WithContext(ctx context.Context) *DeleteResolverParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete resolver params
func (o *DeleteResolverParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete resolver params
func (o *DeleteResolverParams) WithHTTPClient(client *http.Client) *DeleteResolverParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete resolver params
func (o *DeleteResolverParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithForceReload adds the forceReload to the delete resolver params
func (o *DeleteResolverParams) WithForceReload(forceReload *bool) *DeleteResolverParams {
	o.SetForceReload(forceReload)
	return o
}

// SetForceReload adds the forceReload to the delete resolver params
func (o *DeleteResolverParams) SetForceReload(forceReload *bool) {
	o.ForceReload = forceReload
}

// WithName adds the name to the delete resolver params
func (o *DeleteResolverParams) WithName(name string) *DeleteResolverParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the delete resolver params
func (o *DeleteResolverParams) SetName(name string) {
	o.Name = name
}

// WithTransactionID adds the transactionID to the delete resolver params
func (o *DeleteResolverParams) WithTransactionID(transactionID *string) *DeleteResolverParams {
	o.SetTransactionID(transactionID)
	return o
}

// SetTransactionID adds the transactionId to the delete resolver params
func (o *DeleteResolverParams) SetTransactionID(transactionID *string) {
	o.TransactionID = transactionID
}

// WithVersion adds the version to the delete resolver params
func (o *DeleteResolverParams) WithVersion(version *int64) *DeleteResolverParams {
	o.SetVersion(version)
	return o
}

// SetVersion adds the version to the delete resolver params
func (o *DeleteResolverParams) SetVersion(version *int64) {
	o.Version = version
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteResolverParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ForceReload != nil {

		// query param force_reload
		var qrForceReload bool

		if o.ForceReload != nil {
			qrForceReload = *o.ForceReload
		}
		qForceReload := swag.FormatBool(qrForceReload)
		if qForceReload != "" {

			if err := r.SetQueryParam("force_reload", qForceReload); err != nil {
				return err
			}
		}
	}

	// path param name
	if err := r.SetPathParam("name", o.Name); err != nil {
		return err
	}

	if o.TransactionID != nil {

		// query param transaction_id
		var qrTransactionID string

		if o.TransactionID != nil {
			qrTransactionID = *o.TransactionID
		}
		qTransactionID := qrTransactionID
		if qTransactionID != "" {

			if err := r.SetQueryParam("transaction_id", qTransactionID); err != nil {
				return err
			}
		}
	}

	if o.Version != nil {

		// query param version
		var qrVersion int64

		if o.Version != nil {
			qrVersion = *o.Version
		}
		qVersion := swag.FormatInt64(qrVersion)
		if qVersion != "" {

			if err := r.SetQueryParam("version", qVersion); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
