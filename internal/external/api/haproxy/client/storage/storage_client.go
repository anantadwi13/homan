// Code generated by go-swagger; DO NOT EDIT.

package storage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new storage API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for storage API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateStorageMapFile(params *CreateStorageMapFileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateStorageMapFileCreated, error)

	CreateStorageSSLCertificate(params *CreateStorageSSLCertificateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateStorageSSLCertificateCreated, error)

	DeleteStorageMap(params *DeleteStorageMapParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteStorageMapNoContent, error)

	DeleteStorageSSLCertificate(params *DeleteStorageSSLCertificateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteStorageSSLCertificateAccepted, *DeleteStorageSSLCertificateNoContent, error)

	GetAllStorageMapFiles(params *GetAllStorageMapFilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllStorageMapFilesOK, error)

	GetAllStorageSSLCertificates(params *GetAllStorageSSLCertificatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllStorageSSLCertificatesOK, error)

	GetOneStorageMap(params *GetOneStorageMapParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer, opts ...ClientOption) (*GetOneStorageMapOK, error)

	GetOneStorageSSLCertificate(params *GetOneStorageSSLCertificateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOneStorageSSLCertificateOK, error)

	ReplaceStorageMapFile(params *ReplaceStorageMapFileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReplaceStorageMapFileAccepted, *ReplaceStorageMapFileNoContent, error)

	ReplaceStorageSSLCertificate(params *ReplaceStorageSSLCertificateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReplaceStorageSSLCertificateOK, *ReplaceStorageSSLCertificateAccepted, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateStorageMapFile creates a managed storage map file with its entries

  Creates a managed storage map file with its entries.
*/
func (a *Client) CreateStorageMapFile(params *CreateStorageMapFileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateStorageMapFileCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateStorageMapFileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createStorageMapFile",
		Method:             "POST",
		PathPattern:        "/services/haproxy/storage/maps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateStorageMapFileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateStorageMapFileCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateStorageMapFileDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  CreateStorageSSLCertificate creates s s l certificate

  Creates SSL certificate.
*/
func (a *Client) CreateStorageSSLCertificate(params *CreateStorageSSLCertificateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateStorageSSLCertificateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateStorageSSLCertificateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createStorageSSLCertificate",
		Method:             "POST",
		PathPattern:        "/services/haproxy/storage/ssl_certificates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"multipart/form-data"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateStorageSSLCertificateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateStorageSSLCertificateCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateStorageSSLCertificateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteStorageMap deletes a managed map file from disk

  Deletes a managed map file from disk.
*/
func (a *Client) DeleteStorageMap(params *DeleteStorageMapParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteStorageMapNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteStorageMapParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteStorageMap",
		Method:             "DELETE",
		PathPattern:        "/services/haproxy/storage/maps/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteStorageMapReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteStorageMapNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteStorageMapDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  DeleteStorageSSLCertificate deletes s s l certificate from disk

  Deletes SSL certificate from disk.
*/
func (a *Client) DeleteStorageSSLCertificate(params *DeleteStorageSSLCertificateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteStorageSSLCertificateAccepted, *DeleteStorageSSLCertificateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteStorageSSLCertificateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteStorageSSLCertificate",
		Method:             "DELETE",
		PathPattern:        "/services/haproxy/storage/ssl_certificates/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteStorageSSLCertificateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *DeleteStorageSSLCertificateAccepted:
		return value, nil, nil
	case *DeleteStorageSSLCertificateNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteStorageSSLCertificateDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetAllStorageMapFiles returns a list of all managed map files

  Returns a list of all managed map files
*/
func (a *Client) GetAllStorageMapFiles(params *GetAllStorageMapFilesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllStorageMapFilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllStorageMapFilesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllStorageMapFiles",
		Method:             "GET",
		PathPattern:        "/services/haproxy/storage/maps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllStorageMapFilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllStorageMapFilesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAllStorageMapFilesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetAllStorageSSLCertificates returns all available s s l certificates on disk

  Returns all available SSL certificates on disk.
*/
func (a *Client) GetAllStorageSSLCertificates(params *GetAllStorageSSLCertificatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetAllStorageSSLCertificatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllStorageSSLCertificatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllStorageSSLCertificates",
		Method:             "GET",
		PathPattern:        "/services/haproxy/storage/ssl_certificates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllStorageSSLCertificatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAllStorageSSLCertificatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAllStorageSSLCertificatesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetOneStorageMap returns the contents of one managed map file from disk

  Returns the contents of one managed map file from disk
*/
func (a *Client) GetOneStorageMap(params *GetOneStorageMapParams, authInfo runtime.ClientAuthInfoWriter, writer io.Writer, opts ...ClientOption) (*GetOneStorageMapOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOneStorageMapParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOneStorageMap",
		Method:             "GET",
		PathPattern:        "/services/haproxy/storage/maps/{name}",
		ProducesMediaTypes: []string{"application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOneStorageMapReader{formats: a.formats, writer: writer},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOneStorageMapOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetOneStorageMapDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetOneStorageSSLCertificate returns one s s l certificate from disk

  Returns one SSL certificate from disk.
*/
func (a *Client) GetOneStorageSSLCertificate(params *GetOneStorageSSLCertificateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetOneStorageSSLCertificateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOneStorageSSLCertificateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOneStorageSSLCertificate",
		Method:             "GET",
		PathPattern:        "/services/haproxy/storage/ssl_certificates/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOneStorageSSLCertificateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOneStorageSSLCertificateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetOneStorageSSLCertificateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ReplaceStorageMapFile replaces contents of a managed map file on disk

  Replaces the contents of a managed map file on disk
*/
func (a *Client) ReplaceStorageMapFile(params *ReplaceStorageMapFileParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReplaceStorageMapFileAccepted, *ReplaceStorageMapFileNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceStorageMapFileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "replaceStorageMapFile",
		Method:             "PUT",
		PathPattern:        "/services/haproxy/storage/maps/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceStorageMapFileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceStorageMapFileAccepted:
		return value, nil, nil
	case *ReplaceStorageMapFileNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReplaceStorageMapFileDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  ReplaceStorageSSLCertificate replaces s s l certificates on disk

  Replaces SSL certificate on disk.
*/
func (a *Client) ReplaceStorageSSLCertificate(params *ReplaceStorageSSLCertificateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReplaceStorageSSLCertificateOK, *ReplaceStorageSSLCertificateAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceStorageSSLCertificateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "replaceStorageSSLCertificate",
		Method:             "PUT",
		PathPattern:        "/services/haproxy/storage/ssl_certificates/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"text/plain"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ReplaceStorageSSLCertificateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *ReplaceStorageSSLCertificateOK:
		return value, nil, nil
	case *ReplaceStorageSSLCertificateAccepted:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ReplaceStorageSSLCertificateDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
